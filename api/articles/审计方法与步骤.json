{"title":"审计方法与步骤","slug":"审计方法与步骤","date":"2018-11-13T05:07:40.000Z","updated":"2018-12-22T12:57:17.326Z","comments":true,"path":"api/articles/审计方法与步骤.json","photos":[],"link":"","excerpt":"审计前的准备获得源码<br>大多数PHP程序都是开源的、找到官网下载最新的源码包就好了安装网站<br>在本地搭建网站，一边审计一边调试。实时跟踪各种动态变化。","covers":null,"content":"<h1 id=\"审计前的准备\"><a href=\"#审计前的准备\" class=\"headerlink\" title=\"审计前的准备\"></a>审计前的准备</h1><ul>\n<li><strong>获得源码</strong><br>大多数PHP程序都是开源的、找到官网下载最新的源码包就好了</li>\n<li><strong>安装网站</strong><br>在本地搭建网站，一边审计一边调试。实时跟踪各种动态变化。</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"把握大局\"><a href=\"#把握大局\" class=\"headerlink\" title=\"把握大局\"></a>把握大局</h1><ul>\n<li><strong>网站结构</strong><br>浏览源码文件夹，了解该程序的大致目录</li>\n<li><strong>入口文件</strong><br>index.php、admin.php文件一般是整个程序的入口，详细读一下index文件可以知道程序的架构、<br>运行流程、包含哪些配置文件，包含哪些过滤文件以及包含哪些安全过滤文件，了解程序的业务逻辑。</li>\n<li><strong>配置文件</strong><br>一般类似config.php等文件，保存一些数据库相关信息、程序的一些信息。先看看数据库编码，如果<br>GBK则可能存在宽字节注入。如果变量的值用双引号、则可能存在双引号解析代码执行的问题。</li>\n<li><strong>过滤功能</strong><br>通过详读<em>公共函数文件</em>和<em>安全过滤文件</em>等文件，清晰掌握用户输入的数据，哪些被过滤，哪些无<br>过滤，在哪里被过滤了，如何过滤的，能否绕过过滤的数据。过滤的方式是替换还是正则？有没有GPC<br>？有没有使用addslasher()处理？</li>\n</ul>\n<h2 id=\"把握大局-网站结构\"><a href=\"#把握大局-网站结构\" class=\"headerlink\" title=\"把握大局-网站结构\"></a>把握大局-网站结构</h2><p>网站目录结构</p>\n<ul>\n<li><p>主目录</p>\n</li>\n<li><p>模块目录</p>\n</li>\n<li>插件目录</li>\n<li>上传目录</li>\n<li>模板目录</li>\n<li>数据目录</li>\n<li><p>配置目录</p>\n</li>\n<li><p>配置文件<code>config.php</code></p>\n</li>\n<li><p>公共函数文件 <code>lib.php</code></p>\n</li>\n<li><p>安全过滤文件</p>\n</li>\n<li><p>数据库结构</p>\n</li>\n<li><p>入口文件 <code>index.php</code></p>\n</li>\n</ul>\n<h1 id=\"审计方法\"><a href=\"#审计方法\" class=\"headerlink\" title=\"审计方法\"></a>审计方法</h1><h2 id=\"通读全文法\"><a href=\"#通读全文法\" class=\"headerlink\" title=\"通读全文法\"></a>通读全文法</h2><p>通读全文法作为一种最麻烦的方法也是最全面的审计方法。但是针对大型程序，源码成千上万行，<br>这要读到什么时候。了解整个应用的业务逻辑，才能挖掘到更多更有价值的漏洞。<br>这种方法一般是企业对自身产品的审计，当然，对于小型应用，未尝不可以读一读。</p>\n<h2 id=\"敏感函数参数回溯法（shell-exec）\"><a href=\"#敏感函数参数回溯法（shell-exec）\" class=\"headerlink\" title=\"敏感函数参数回溯法（shell_exec）\"></a>敏感函数参数回溯法（shell_exec）</h2><p><strong>根据敏感函数，逆向追踪参数传递的过程。</strong><br>这个方法是最高效，最常用的方法。<br>大多数漏洞的产生是因为函数的使用不当导致的。我们只要找到这样的一些使用不当的函数，就可以快速挖掘想要的漏洞。<br>这方面，Seay法师有一款神奇<strong>Seay源代码审计系统</strong>，主要是利用正则匹配一些高危函数、关键函数以及敏感关键字。<br>然后，我们就可以分析判断敏感函数的上下文，追踪参数源头。<br>尝试控制可控的参数变量。</p>\n<h2 id=\"定向功能分析法（安装问题）\"><a href=\"#定向功能分析法（安装问题）\" class=\"headerlink\" title=\"定向功能分析法（安装问题）\"></a>定向功能分析法（安装问题）</h2><p>该方法主要是根据程序的业务逻辑来审计的。<br>首先是用浏览器逐个访问浏览，看看这套程序有哪些功能，根据相关功能，大概推测可能存在那些漏洞。</p>\n<h3 id=\"常见功能漏洞：（包括但不限于）\"><a href=\"#常见功能漏洞：（包括但不限于）\" class=\"headerlink\" title=\"常见功能漏洞：（包括但不限于）\"></a>常见功能漏洞：（包括但不限于）</h3><ul>\n<li>程序初始安装</li>\n<li>站点信息泄露</li>\n<li>文件上传</li>\n<li>文件管理</li>\n<li>登陆认证</li>\n<li>数据库备份恢复</li>\n<li>找回密码</li>\n<li>验证码</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>首先，不管是什么程序，都要把握大局。<br>其次，根据定向功能法针对每一项功能进行审计。<br>最后，就是敏感函数参数回溯了。</p>\n","categories":[],"tags":[{"name":"PHP代码审计","slug":"PHP代码审计","count":5,"path":"api/tags/PHP代码审计.json"}]}