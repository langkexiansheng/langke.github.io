{"title":"常见PHP-ini配置","slug":"常见PHP-ini配置","date":"2018-11-13T06:03:31.000Z","updated":"2018-12-22T13:00:42.267Z","comments":true,"path":"api/articles/常见PHP-ini配置.json","photos":[],"link":"","excerpt":"常见的INI配置常见重要配置全局变量","covers":null,"content":"<h1 id=\"常见的INI配置\"><a href=\"#常见的INI配置\" class=\"headerlink\" title=\"常见的INI配置\"></a>常见的INI配置</h1><h3 id=\"常见重要配置\"><a href=\"#常见重要配置\" class=\"headerlink\" title=\"常见重要配置\"></a>常见重要配置</h3><h5 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h5><a id=\"more\"></a>\n<ul>\n<li><code>register_globals = off</code><br>有些程序例如<code>OSC</code>需要启用全局变量。这个设置的作用是关闭自动注册的全局变量，<br>在设置<code>On</code>的时候，<code>php</code>会将<code>$_POST</code>,<code>$_GET</code>,<code>$_COOKIE</code>,<code>$_ENV</code>,<code>$_SESSION</code>数组中的<code>$key</code>=&gt;<code>$value</code>直接注册为变量，比如<code>$_POST[&#39;username&#39;]</code>就会被注册为<code>$username</code>.<blockquote>\n<p>虽然方便了调用，但是会有三个问题：</p>\n<ul>\n<li>不知道变量是哪里来的，<code>$_POST</code>来的还是<code>$_SESSION</code>来的呢？非常不方便别人阅读代码。</li>\n<li><strong>变量之间互相覆盖，引起不必要的麻烦。</strong></li>\n<li>安全问题。所以要设置为Off。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"短标签\"><a href=\"#短标签\" class=\"headerlink\" title=\"短标签\"></a>短标签</h5><ul>\n<li>short_open_tag = On<br>这个设置决定是否允许使用PHP代码开始标志的缩写形式(&lt;??&gt;)。<br>如果禁用了，必须使用PHP代码开始标志的完整形式(&lt;?php ?&gt;)。<br>本指令也会影响到缩写形式 &lt;?=,它和&lt;? echo等价。<br>使用此缩写需要short_open_tag的值为On。<br>从PHP5.4.0起，&lt;?= 总是可用的。</li>\n</ul>\n<h5 id=\"禁用类-函数\"><a href=\"#禁用类-函数\" class=\"headerlink\" title=\"禁用类/函数\"></a>禁用类/函数</h5><ul>\n<li>disable_classes = </li>\n<li>disable_functions =<br>禁用某些类，禁止某些函数。<br>接受逗号分隔的函数名列表作为参数。<br>只能设置在PHP.INI中</li>\n</ul>\n<h5 id=\"设置上传及最大上传文件大小\"><a href=\"#设置上传及最大上传文件大小\" class=\"headerlink\" title=\"设置上传及最大上传文件大小\"></a>设置上传及最大上传文件大小</h5><ul>\n<li>file_uploads = on</li>\n<li>upload_max_filesize = 8M</li>\n</ul>\n<h5 id=\"文件上传临时目录\"><a href=\"#文件上传临时目录\" class=\"headerlink\" title=\"文件上传临时目录\"></a>文件上传临时目录</h5><ul>\n<li>upload_tmp_dir =<br>上传临时文件保存的目录，需要可写，如果不设置，，则采用系统临时目录。（/tmp、C:\\Windows\\Temp）</li>\n</ul>\n<h5 id=\"用户访问目录限制\"><a href=\"#用户访问目录限制\" class=\"headerlink\" title=\"用户访问目录限制\"></a>用户访问目录限制</h5><ul>\n<li>open_basedir = .:/tmp/<br>linux系统用<code>:</code>分割，Windows系统用<code>;</code>分割。<br>使用open_basedir选项能够控制PHP脚本只能访问指定的目录，这样能够避免PHP脚本访问不应该访问的文件，一定程度上限制了PHPSHELL的危害。<br>我们一般可以设置为只能访问网站目录，表示允许访问当前目录（即PHP脚本文件所在的目录）和/tmp/目录，有效防止php木马跨站运行。</li>\n</ul>\n<h5 id=\"错误信息控制\"><a href=\"#错误信息控制\" class=\"headerlink\" title=\"错误信息控制\"></a>错误信息控制</h5><ul>\n<li>display_error = On<br>是否将错误信息作为输出的一部分，站点发布后应该关闭这项功能，以免暴漏信息。<br>调试的时候当然是要On的，不然就看不到错误信息了。</li>\n</ul>\n<h5 id=\"设置错误报告级别\"><a href=\"#设置错误报告级别\" class=\"headerlink\" title=\"设置错误报告级别\"></a>设置错误报告级别</h5><ul>\n<li>error_reporting = E_ALL<br>这个设置的作用是将错误级别设置为最高，可以显示所有的问题，方便差错，也有利于写出高质量的代码。<br>日志级别是一些常量，在php.ini中有写，推荐使用 E_ALL | E_STRICT,即所有级别。</li>\n</ul>\n<h5 id=\"错误日志\"><a href=\"#错误日志\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h5><ul>\n<li>error_log =<br>错误日志的位置，必须对web用户可写入，如果不定义则默认写入到web服务器的错误日志中去。</li>\n<li>log_errors = on<br>如上所说，建议将错误日志输出到文件，而不是直接输出到前端。</li>\n<li>log_errors_max_length = 1024<br>错误日志关联信息的最大长度，设为0表示无限长度。</li>\n</ul>\n<h5 id=\"是否允许打开远程文件\"><a href=\"#是否允许打开远程文件\" class=\"headerlink\" title=\"是否允许打开远程文件\"></a>是否允许打开远程文件</h5><ul>\n<li>allow_url_fopen = on<br>本选项激活了URL形式的fopen封装协议使得可以访问URL对象例如文件。<br>默认的封装协议提供用ftp和http协议来访问远程文件。<br>一些扩展库例如zlib可能会注册更多的封装协议。 </li>\n</ul>\n<h5 id=\"是否允许包含远程文件\"><a href=\"#是否允许包含远程文件\" class=\"headerlink\" title=\"是否允许包含远程文件\"></a>是否允许包含远程文件</h5><ul>\n<li>allow_url_include = off<br>本选项激活允许<code>include</code>,<code>include_once</code>,<code>require</code>,<code>require_once</code>等函数使用URL形式的fopen封装协议。<br>简单来说就是可以包含远程文件。</li>\n</ul>\n","categories":[],"tags":[{"name":"PHP代码审计","slug":"PHP代码审计","count":2,"path":"api/tags/PHP代码审计.json"}]}