{"name":"PHP代码审计","slug":"PHP代码审计","count":3,"postlist":[{"title":"PHP-常见危险函数","slug":"PHP-常见危险函数","date":"2019-02-03T09:43:50.000Z","updated":"2019-02-04T07:55:31.625Z","comments":true,"path":"api/articles/PHP-常见危险函数.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"常见危险函数\"><a href=\"#常见危险函数\" class=\"headerlink\" title=\"常见危险函数\"></a>常见危险函数</h1><h2 id=\"PHP代码执行函数\"><a href=\"#PHP代码执行函数\" class=\"headerlink\" title=\"PHP代码执行函数\"></a>PHP代码执行函数</h2><ul>\n<li>mixed eval(string $code)</li>\n</ul>\n<p>把字符串 $code 作为PHP代码执行<br>很多常见的<code>webshell</code>都是用<code>eval</code>来执行具体操作的<br>比如：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> @<span class=\"keyword\">eval</span>($_POST[<span class=\"string\">'cmd'</span>]);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>bool assert( mixed $assertion [, string $description]) </li>\n</ul>\n<p>检查一个断言是否为 FALSE. (把字符串 $assertion 作为PHP代码执行)</p>\n<p>因为大多数杀软把<code>eval</code>列入黑名单了，所以用<code>assert</code>来代替<code>eval</code>来执行具体操作<br>比如：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> $_GET[<span class=\"string\">'a'</span>]($_GET[<span class=\"string\">'b'</span>]);<span class=\"meta\">?&gt;</span></span><br><span class=\"line\">POC:</span><br><span class=\"line\">?a=assert&amp;b=system(<span class=\"string\">'whoami'</span>)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>mixed preg_replace (mixed $pattern, mixed $replacement, mixed $subject [, int $limit=-1[, int &amp;$count]])<br><code>/e</code>修正符使<code>preg_replace()</code>将<code>replacement</code>参数当作<code>PHP</code>代码<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">preg_replace(<span class=\"string\">\"/test/e\"</span>, $_GET[h], <span class=\"string\">\"justst ssda\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果我们提交<code>?h=phpinfo()</code>,<code>phpinfo()</code>将会被执行</p>\n<ul>\n<li><p>string create_function (string $args, string $code)<br>创建一个匿名函数，并返回独一无二的函数名。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$newfunc=create_function(<span class=\"string\">'$v'</span>, <span class=\"string\">'return system($v);'</span>);</span><br><span class=\"line\">$newfunc(<span class=\"string\">'whomai'</span>);`就相当于`system(<span class=\"string\">'whoami'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mixed call_user_func( callable $callback [, mixed $parameter [, mixed $…]])<br>第一个参数<code>callback</code>是被调用的回调函数，其余参数是回调函数的参数。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call_user_func(<span class=\"string\">'system'</span>,<span class=\"string\">'whoami'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mixed call_user_func_array( callable $callback, array $param_arr)<br>把第一个参数作为回调函数(callback)调用，把参数数组作(param_arr)为回调函数的参数传入</p>\n</li>\n</ul>\n<h2 id=\"包含函数\"><a href=\"#包含函数\" class=\"headerlink\" title=\"包含函数\"></a>包含函数</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span>、 <span class=\"keyword\">include</span>、 <span class=\"keyword\">require_once</span>、 <span class=\"keyword\">include_once</span></span><br></pre></td></tr></table></figure>\n<p>包含函数一共有四个，主要作用为包含并运行指定文件。<br><code>include</code> $file;<br>在变量 <code>$file</code>可控的情况下，我们就可以包含任意文件，从而达到<code>getshell</code>的目的。<br>另外，在不同的配置环境下，可以包含不同的文件。<br>因此又分为远程文件包含和本地文件包含。<br>包含函数也能够读取任意文件内容，这就需要用到【支持的协议和封装协议】和【过滤器】。<br>例如，利用PHP流<code>filter</code>读取任意文件<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>($_GET[<span class=\"string\">'fiel'</span>]);</span><br><span class=\"line\">?file=php:<span class=\"comment\">//filter/convert.base64-encode/resource=index.php</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"命令执行函数\"><a href=\"#命令执行函数\" class=\"headerlink\" title=\"命令执行函数\"></a>命令执行函数</h2><ul>\n<li>exec()——执行一个外部程序</li>\n<li>passthru()——执行外部程序并且显示原始输出</li>\n<li>proc_open()——执行一个命令，并且打开用来输入/输出的文件指针</li>\n<li>shell_exec() &amp; `` ——通过shell环境执行命令，并且将完整的输出以字符串的方式返回。</li>\n<li>system()——执行外部程序，并且显示输出</li>\n<li>popen()——通过<code>popen()</code>的参数传递一条命令，并对<code>popen()</code>所打开的文件进行执行。</li>\n</ul>\n<p><strong>执行函数包括但不限于上述几个</strong></p>\n<p>同样的道理、只要命令的参数可控就够执行系统命令。<br>例如：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system($cmd);</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\">system(<span class=\"string\">'ping -c 3'</span>.$target);</span><br></pre></td></tr></table></figure></p>\n<p>当<code>$cmd</code>可控就能执行任意命令，<br>而当<code>$target</code>可控的话，可以用管道符等特殊字符截断从而执行任意命令。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$target=<span class=\"string\">'a | whoami'</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"文件操作函数\"><a href=\"#文件操作函数\" class=\"headerlink\" title=\"文件操作函数\"></a>文件操作函数</h2><ul>\n<li>copy——拷贝文件</li>\n<li>file_get_contents —— 将整个文件读入一个字符串</li>\n<li>file_put_contents —— 将一个字符串写入文件</li>\n<li>file —— 把整个文件读入一个数组中</li>\n<li>fopen —— 打开文件或者 URL</li>\n<li>move_uploaded_file —— 将上传的文件移动到新位置</li>\n<li>readfile —— 输出文件</li>\n<li>rename —— 重命名一个文件或目录</li>\n<li>rmdir —— 删除目录</li>\n<li>unlink &amp; delete —— 删除文件</li>\n</ul>\n<p>任意文件读取、写入、删除往往是上面几个函数受到了控制（当然还有其他的函数）。<br>不同的函数在不同的场景有不同的作用和不同的利用手法。<br>读取： 可以读取配置等文件，拿到key<br>写入： 可以写入shell代码相关的内容<br>删除： 可以删除.lock文件而可以重新安装覆盖</p>\n<p><strong>更多思路请自行挖掘测试！！！</strong></p>\n<h2 id=\"特殊函数\"><a href=\"#特殊函数\" class=\"headerlink\" title=\"特殊函数\"></a>特殊函数</h2><ul>\n<li>信息泄露</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool phpinfo ([int $what = INFO_ALL])</span><br></pre></td></tr></table></figure>\n<p>输出 PHP 当前状态的大量信息，包含了 PHP 编译选项、启用的扩展、PHP版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP环境变量、操作系统版本信息、path变量、配置选项的本地值和主值、HTTP头和PHP授权信息（License）。</p>\n<ul>\n<li>软连接-读取文件内容</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool symlink (string $target, string $link)</span><br></pre></td></tr></table></figure>\n<p><code>symlink()</code>对于已有的<code>target</code>建立一个名为<code>link</code>的符号连接。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string readlink (string $path)</span><br></pre></td></tr></table></figure></p>\n<p><code>readlink()</code>和同名的C函数做同样的事，返回符号链接的内容。</p>\n<ul>\n<li>环境变量</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string getenv (string $varname)</span><br></pre></td></tr></table></figure>\n<p>获取一个环境变量的值<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool putenv (string $setting)</span><br></pre></td></tr></table></figure></p>\n<p>添加 setting 到服务器环境变量。 环境变量仅存活于当前请求期间。在请求结束时环境会恢复到初始状态。</p>\n<ul>\n<li>加载扩展</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool dl (string $library)</span><br></pre></td></tr></table></figure>\n<p>载入指定参数<code>library</code>的PHP扩展</p>\n<ul>\n<li>配置相关</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string ini_get (string $varname)</span><br></pre></td></tr></table></figure>\n<p>成功时返回配置选项的值。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string ini_set (string $varname, string $newvalue)</span><br><span class=\"line\">string ini_alter (string $varname, string $newvalue)</span><br></pre></td></tr></table></figure></p>\n<p>设置指定配置选项的值。这个选项会在脚本运行时保持新的值，并在脚本结束时恢复。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void ini_restore (string $varname)</span><br></pre></td></tr></table></figure></p>\n<p>恢复指定的配置选项到它的原始值。</p>\n<ul>\n<li>数字判断</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool is_numeric (mixed $var)</span><br></pre></td></tr></table></figure>\n<p>如果<code>var</code>是数字和数字字符串则返回<code>TRUE</code>, 否则返回<code>FALSE</code>。<br>仅用<code>is_numeric</code>判断而不用<code>intval</code>转换就有可能插入16进制的字符串到数据库，进而可能导致sql二次注入。</p>\n<ul>\n<li>数组相关</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool in_array (mixed $needle, <span class=\"keyword\">array</span> $haystack [,bool $strict = <span class=\"keyword\">FALSE</span>])</span><br></pre></td></tr></table></figure>\n<p>在<code>haystack</code>中搜索<code>needle</code>,如果没有设置<code>strict</code>则使用宽松的比较。<br>该函数有一个特性，比较之前会进行自动类型转换。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"string\">'1abc'</span>;</span><br><span class=\"line\">in_array($a, <span class=\"keyword\">array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)) <span class=\"comment\">// 返回 真</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>变量覆盖<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void parse_str (string $str [,<span class=\"keyword\">array</span> &amp;$arr])</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果<code>str</code>是URL传递入的查询字符串（query string）,则将它解析为变量并设置到当前作用域。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int extract (<span class=\"keyword\">array</span> &amp;$var_array [,int $extract_type = EXTR_OVERWRITE [, string $prefix = <span class=\"keyword\">NULL</span>]])</span><br></pre></td></tr></table></figure></p>\n<p>本函数用来将变量从数组中导入到当前的符号表中。检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool mb_parse_str (string $encoded_string [, <span class=\"keyword\">array</span> &amp;$result])</span><br></pre></td></tr></table></figure></p>\n<p>解析GET/POST/COOKIE数据并设置全局变量。由于PHP不提供原始POST/COOKIE数据，目前它仅能够用于GET数据。它解析了URL编码过的数据，检测其编码，并转换编码为内部编码，然后设置其值为<code>array</code>的<code>result</code>或者全局变量。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool import_request_variables (string $types [, string $prefix])</span><br></pre></td></tr></table></figure></p>\n<p>将GET/POST/COOKIE变量导入到全局作用域中。如果你禁止了<code>register_globals</code>,但又想用到一些全局变量，那么此函数就很有用。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$str = <span class=\"string\">\"first=value&amp;arr[]=foo+bar&amp;arr[]=baz\"</span>;</span><br><span class=\"line\">parse_str($str);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $first;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"number\">0</span>]; <span class=\"comment\">// foo bar</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"number\">1</span>]; <span class=\"comment\">// baz</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：valuefoo barbaz</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>列目录</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span> glob (string $pattern [,int $flags = <span class=\"number\">0</span>])</span><br></pre></td></tr></table></figure>\n<p><code>glob()</code>函数依照<code>libc glob()</code>函数使用的规则寻找所有与<code>pattern</code>匹配的文件路径，类似于一般<code>shells</code>所用的规则一样。不进行缩写扩展或参数替代。</p>\n<ul>\n<li>无参数获取信息</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span> get_defined_vars (void)</span><br></pre></td></tr></table></figure>\n<p>返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span> get_defined_constants ([bool $categorize = <span class=\"keyword\">false</span>])</span><br></pre></td></tr></table></figure></p>\n<p>返回当前所有已定义的常量名和值。这包含<code>define()</code>函数所创建的,也包含了所有扩展所创建的。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span> get_defined_functions (void)</span><br></pre></td></tr></table></figure></p>\n<p>返回一个包含所有已定义函数列表的多维数组<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">array</span> get_included_files (void)</span><br></pre></td></tr></table></figure></p>\n<p>返回所有被<code>include、include_once、require</code>和<code>require_once</code>的文件名</p>\n","text":"常见危险函数PHP代码执行函数mixed eval(string $code)把字符串 $code 作为PHP代码执行<br>很多常见的webshell都是用eval来执行具体操作的<br>比如：<br>1<br>&lt;?php @eval($_POST['cmd']);?&g","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"PHP代码审计","slug":"PHP代码审计","count":3,"path":"api/tags/PHP代码审计.json"}]},{"title":"常见PHP-ini配置","slug":"常见PHP-ini配置","date":"2018-11-13T06:03:31.000Z","updated":"2018-12-22T13:00:42.267Z","comments":true,"path":"api/articles/常见PHP-ini配置.json","excerpt":"<h1 id=\"常见的INI配置\"><a href=\"#常见的INI配置\" class=\"headerlink\" title=\"常见的INI配置\"></a>常见的INI配置</h1><h3 id=\"常见重要配置\"><a href=\"#常见重要配置\" class=\"headerlink\" title=\"常见重要配置\"></a>常见重要配置</h3><h5 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h5>","keywords":null,"cover":null,"content":null,"text":"常见的INI配置常见重要配置全局变量register_globals = off<br>有些程序例如OSC需要启用全局变量。这个设置的作用是关闭自动注册的全局变量，<br>在设置On的时候，php会将$_POST,$_GET,$_COOKIE,$_ENV,$_SESSION数组中","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"PHP代码审计","slug":"PHP代码审计","count":3,"path":"api/tags/PHP代码审计.json"}]},{"title":"审计方法与步骤","slug":"审计方法与步骤","date":"2018-11-13T05:07:40.000Z","updated":"2018-12-22T12:57:17.326Z","comments":true,"path":"api/articles/审计方法与步骤.json","excerpt":"<h1 id=\"审计前的准备\"><a href=\"#审计前的准备\" class=\"headerlink\" title=\"审计前的准备\"></a>审计前的准备</h1><ul>\n<li><strong>获得源码</strong><br>大多数PHP程序都是开源的、找到官网下载最新的源码包就好了</li>\n<li><strong>安装网站</strong><br>在本地搭建网站，一边审计一边调试。实时跟踪各种动态变化。</li>\n</ul>","keywords":null,"cover":null,"content":null,"text":"审计前的准备获得源码<br>大多数PHP程序都是开源的、找到官网下载最新的源码包就好了安装网站<br>在本地搭建网站，一边审计一边调试。实时跟踪各种动态变化。把握大局网站结构<br>浏览源码文件夹，了解该程序的大致目录入口文件<br>index.php、admin.php文件一般","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"PHP代码审计","slug":"PHP代码审计","count":3,"path":"api/tags/PHP代码审计.json"}]}]}