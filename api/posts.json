{"total":34,"pageSize":10,"pageCount":4,"data":[{"title":"app中的加密与解密","slug":"app中的加密与解密","date":"2019-01-21T09:26:19.000Z","updated":"2019-01-21T10:00:00.157Z","comments":true,"path":"api/articles/app中的加密与解密.json","excerpt":"","keywords":null,"cover":"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/APP逆向/app_raw.png","content":"<h2 id=\"App渗透中常见的加密与解密\"><a href=\"#App渗透中常见的加密与解密\" class=\"headerlink\" title=\"App渗透中常见的加密与解密\"></a>App渗透中常见的加密与解密</h2><pre><code>本文主要介绍了目前App数据传输过程中几种常见的加密方式，以及一些常规的解密手段，并不涵盖并应对所有情况，在实战过程中还须具体情况具体分析，随机应变；（注：全文中所提到的App仅针对Android App）\n</code></pre><p>随着App移动应用的广泛应用及移动开发技术的飞速发展，移动应用的安全也越来越被重视；<br>在App服务端渗透中，我们在抓包时经常会发现App在数据传输过程中做了加密（如图1），以防止数据被查看或被篡改；<br>而渗透过程中的很多时候我们都需要抓包修改，这就要求我们需要先对App数据包进行解密了。</p>\n<h3 id=\"一些常见的加密方式\"><a href=\"#一些常见的加密方式\" class=\"headerlink\" title=\"一些常见的加密方式\"></a>一些常见的加密方式</h3><p>对于App传输数据加密，一般会考虑三个方面:<br>1）可用性：客户端和服务端都可逆向破解<br>2）较高的安全性：不容易被破解<br>3）效率性：加密性能及资源占用方面不是很高</p>\n<p>针对以上三个方面需求，目前用得最多有以下几种加密方式（当然，有时候会掺杂一些其他的小算法，具体情况自行识别和解码即可），其特点及优缺点分别阐述如下。</p>\n<p>1）对称性加密。如DES、AES、3DES等。这些加密方式的算法基本已公开，因此其特点为密钥/生成密钥的方法固定，因此这种加密方式的优点为性能效率较好，而且也较大的提升了解密的成本；但由于密钥固定，因此缺点也很明显了，则是在客户端和服务端上都能找到密钥或密钥的生成方法。因此其突破口为通过逆向客户端来寻找密钥。另外，这种加密方式可同时用于请求包和返回包。</p>\n<p>2）非对称性加密。如RSA、Rabin等。这些加密方式的算法基本也已经公开，因此其特点为有一对公钥和私钥：客户端上保存公钥，用于加密；服务端上保存私钥，用于解密。因此这种加密方式的优点为安全性较高，客户端上只有用于加密的公钥，而没有用于解密的私钥；而弱点则为加解密效率不高，性能资源占用较大，所以目前很多App还是选用对称性加密。由于客户端上没有解密数据包的私钥，因此需要使用其他方法获取数据包明文才能进行数据包篡改。（获取方法后续详述）另外，由于只有一对公钥和私钥，所以这种加密方式一般只会出现在请求包，而返回包则一般为明文返回。</p>\n<p>3）自定义算法加密。有少数App开发的技术人员还会使用自定义算法来对数据包进行加密，算法五花八门，大多为各种常见的编码（如Base64）和字节位移运算等混杂。这种加密方式的优点为效率较高，但缺点为算法硬编码在客户端中，只要通过逆向即可解密出来。</p>\n<p>以上三种加密方式各有优缺点，对于第一和第三种，虽说可通过逆向App获取密钥/算法来进行解密，但是开发者往往会通过其他手段来增强安全性，如App加固或把密钥/算法硬编码在so文件中等；这样就更进一步地提高了逆向与解密的难度和成本了。</p>\n<h3 id=\"常规的解密手段\"><a href=\"#常规的解密手段\" class=\"headerlink\" title=\"常规的解密手段\"></a>常规的解密手段</h3><ul>\n<li>判断加密方式</li>\n</ul>\n<p>对于解密，首先我们须要先大概判断使用的是什么样的加密方式，不管是对称还是非对称加密，从这些加密算法的密文形式可知，一般只有以下三种：</p>\n<p>1）原始格式。也就是字节数组了，这种展现在数据包中就是乱码了。</p>\n<p><img src=\"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/APP逆向/app_raw.png\" alt=\"\"></p>\n<p>2）十六进制，亦即Hex编码。对称/非对称加密后，做了Hex编码处理（如图3）</p>\n<p><img src=\"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/APP逆向/app_hex.png\" alt=\"\"></p>\n<p>3）Base64编码样式，对称/非对称加密后，做了Base64编码处理（如图4）</p>\n<p><img src=\"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/APP逆向/app_base.png\" alt=\"\"></p>\n<p>综上，如果发现数据包是这三种形式，而且尝试过Base64反编码后是乱码的，那很大概率就是使用了对称/非对称性加密了；<br>而对于自定义算法加密的，一来并不常见，二来很多时候密文形式会比较奇葩，所以最后考虑。</p>\n<p>当判断出是对称/非对称加密时，我们可以进一步判断用的是对称还是非对称。<br>判断方法比较多，最简单的一个方法是，对于同一个数据请求包，重复触发时，<br>密文是一模一样的则为对称性加密，而密文不一样的则为非对称性加密了。</p>\n<ul>\n<li>定位密钥/算法代码</li>\n</ul>\n<p>接着，我们需要通过逆向App来寻找对称/非对称性加密的密钥。<br>逆向后，得到的是java代码及对应的Smali代码。<br>一般地，前者用于分析，后者用于调试。<br>我们先在java代码中查找并定位到加密过程的代码。<br>如何定位？一言以蔽之：全靠眼和经验。<br>比如可以在整个class包中查找含有加密数据包的url接口所在的位置，然后一步步跟踪查看其加密数据是通过什么函数生成的，最终定位到加密函数，当然中间的函数跳转可能会很多；又如可以暴力地直接在整个class包中查找加密函数的一些关键字，如AES、DES之类的，当然这样返回的结果可能会很多，只要一个个验证过去就可以了。至于如何验证，我们可以通过经验去判断，也可以通过下面所讲的调试。</p>\n<ul>\n<li>调试</li>\n</ul>\n<blockquote>\n<p>第一种</p>\n</blockquote>\n<p>正如开发编程一样，调试往往是程序定位的最好方法。而调试有两种方法，一为日志输出，二为动态调试。<br>举个例子，比如我们在java代码查找中找到一段DES的加密函数代码，不确定是否数据包加密时所调用的，<br>这时我们可以在Smali代码里该函数中插入日志输出代码，如<br><code>const-string v0, &quot;Log here！！！！！！！&quot;</code><br><code>invoke-static {v0, v0}, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</code><br>保存后编译回apk文件，并在手机/模拟器中安装后打开App触发加密数据包，<br>并通过<code>adb logcat</code>输出日志，查看是否有<code>“Log here!!!!!!”。</code>如果有则说明加密函数代码定位成功；反之则失败。</p>\n<blockquote>\n<p>第二种</p>\n</blockquote>\n<p>当然，我们也可以使用动态调试法来解决上面的例子。<br>将反编译后的App文件夹载入到开发环境中（如Eclipse等），<br>记得先修改AndroidManifest.xml开启调试模式，<br>然后在Smali代码里该函数开头处设置断点，<br>并在开发环境所连接的Android模拟器中启动App触发加密数据包，<br>即可通过查看是否停在断点出来进行判断。</p>\n<ul>\n<li>获取密钥/算法</li>\n</ul>\n<blockquote>\n<p>一</p>\n</blockquote>\n<p>当定位到加密函数后，算法已经展示在面前了。<br>而密钥的话，我们可以继续使用调试方法来获取密钥。<br>如果使用日志输出法的话，有时候密钥不一定是字符串格式，直接日志输出时会报错，<br>所以我们切记一定要在Smali代码中把密钥的对应参数类型转换为字符串格式；<br>如果使用动态调试法的话，开发环境中走到密钥寄存器那一步时会则自动显示出来。</p>\n<blockquote>\n<p>二</p>\n</blockquote>\n<p>对于对称性加密和自定义算法加密的，<br>当获取到加密密钥/算法时，我们已经可以直接解密数据包获取明文–篡改明文数据包（如加入注入/xss攻击字符串）–加密明文数据包为密文–发送了；<br>而对于非对称性加密，<br>由于客户端中只有公钥，因此只能做篡改数据包后的加密动作，而无法直接解密数据包；<br>此时，我们可以使用其他方法来获取数据包明文，比如使用调试同理把加密前的数据包明文参数获取即可~</p>\n<h3 id=\"防御手段\"><a href=\"#防御手段\" class=\"headerlink\" title=\"防御手段\"></a>防御手段</h3><p>没有绝对的安全，预防往往是建立在不断提高攻击成本和难度的基础上。<br>针对上述常规的解密手段，我们可以从以下方面来增强App加密的安全性。</p>\n<p>1）App加固。使用加壳、混淆等手段，增强App被反编译的难度和成本。</p>\n<p>2）使用So文件来保存密钥/算法。由于So文件是c编译的，因此反编译的难度无疑增大了很多。</p>\n<p>3）重要的核心业务App考虑使用加密WAF。一般经过加密后的App，WAF基本已经失去检测和防御作用了；<br>因此，对于重要的核心业务App，可考虑把加密模块加到WAF中，以保持检测防御效果。</p>\n","text":"App渗透中常见的加密与解密本文主要介绍了目前App数据传输过程中几种常见的加密方式，以及一些常规的解密手段，并不涵盖并应对所有情况，在实战过程中还须具体情况具体分析，随机应变；（注：全文中所提到的App仅针对Android App）随着App移动应用的广泛应用及移动开发技术的飞","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"App","slug":"App","count":1,"path":"api/tags/App.json"}]},{"title":"CTF线下赛总结","slug":"CTF线下赛总结","date":"2019-01-03T07:21:43.000Z","updated":"2019-01-03T09:07:12.905Z","comments":true,"path":"api/articles/CTF线下赛总结.json","excerpt":"<h1 id=\"CTF线下攻防赛\"><a href=\"#CTF线下攻防赛\" class=\"headerlink\" title=\"CTF线下攻防赛\"></a>CTF线下攻防赛</h1>","keywords":null,"cover":"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/CTF/1707042315cda976443f9eca49.png","content":null,"text":"CTF线下攻防赛 [Figure] http://www.freebuf.com/articles/web/96675.html总结CTF能够给不能层次的人在技术上带来提高。没有网络信息安全基础的学生通过CTF，建立了安全攻防的概念；有初步基础的学生，通过高质量赛题的实践练习，提","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"CTF思路","slug":"CTF思路","count":1,"path":"api/tags/CTF思路.json"}]},{"title":"去火","slug":"去火","date":"2018-12-18T08:07:17.000Z","updated":"2018-12-26T03:31:59.462Z","comments":true,"path":"api/articles/去火.json","excerpt":"<h1 id=\"去火\"><a href=\"#去火\" class=\"headerlink\" title=\"去火\"></a>去火</h1><pre><code>本来这是技术博客，为什么写一篇关于去火的文章那？安全这个行业，表面\n上看着挺轻松的，其实也是经常熬夜的。最近上火，每天晚上失眠，折腾我\n差不多一个月了。以此文提醒自己，工作的同时，也不要忘记健康。\n</code></pre>","keywords":null,"cover":null,"content":null,"text":"去火本来这是技术博客，为什么写一篇关于去火的文章那？安全这个行业，表面上看着挺轻松的，其实也是经常熬夜的。最近上火，每天晚上失眠，折腾我差不多一个月了。以此文提醒自己，工作的同时，也不要忘记健康。去火速查表序列对应的部位症状治疗对策1肺火干咳无痰或痰少而粘、潮热盗汗、手足心热、失","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"健康","slug":"健康","count":1,"path":"api/tags/健康.json"}]},{"title":"py版netcat","slug":"py版netcat","date":"2018-12-16T04:17:39.000Z","updated":"2018-12-22T13:01:30.796Z","comments":true,"path":"api/articles/py版netcat.json","excerpt":"<h1 id=\"python-版-nc\"><a href=\"#python-版-nc\" class=\"headerlink\" title=\"python 版 nc\"></a>python 版 nc</h1><pre><code>最近在啃《Python 黑帽子：黑客与渗透测试编程之道》这本书，书中提到用py写一个替代nc的工具。\n比这写了一边，发现不能用，毕竟太久远了。后来去网上各种搜，已经后很多人写了，谷歌百度大\n概看了十来个。有一点可以肯定：都是把原著照搬下来，然后用subprocess换个命令行。找了俩个\n正规的下载下来试了下。。。跑不起来，可能是我能力有限。好吧，只能自己写了。\n</code></pre>","keywords":null,"cover":"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/python/netcat_falg.png","content":null,"text":"python 版 nc最近在啃《Python 黑帽子：黑客与渗透测试编程之道》这本书，书中提到用py写一个替代nc的工具。比这写了一边，发现不能用，毕竟太久远了。后来去网上各种搜，已经后很多人写了，谷歌百度大概看了十来个。有一点可以肯定：都是把原著照搬下来，然后用subproce","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"python-工具","slug":"python-工具","count":1,"path":"api/tags/python-工具.json"}]},{"title":"网络编程入门","slug":"网络编程入门","date":"2018-12-13T08:01:42.000Z","updated":"2018-12-13T08:16:44.950Z","comments":true,"path":"api/articles/网络编程入门.json","excerpt":"<h1 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h1>","keywords":null,"cover":"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/python/socket_yanshi.png","content":null,"text":"客户端1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br># -*- coding: utf-8 -*-<br><br>import socket<br><b","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"python-网络","slug":"python-网络","count":1,"path":"api/tags/python-网络.json"}]},{"title":"NMAP脚本NSE的使用","slug":"NMAP脚本NSE的使用","date":"2018-12-10T02:51:12.000Z","updated":"2018-12-22T13:02:25.089Z","comments":true,"path":"api/articles/NMAP脚本NSE的使用.json","excerpt":"<h1 id=\"nmap加载nse脚本在内网渗透中的使用\"><a href=\"#nmap加载nse脚本在内网渗透中的使用\" class=\"headerlink\" title=\"nmap加载nse脚本在内网渗透中的使用\"></a>nmap加载nse脚本在内网渗透中的使用</h1><pre><code>大部分时间我们都用nmap来做端口扫描，其实它还可以进行攻击尝试。\n</code></pre>","keywords":null,"cover":"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/内网渗透/nmap_pei.png","content":null,"text":"nmap加载nse脚本在内网渗透中的使用大部分时间我们都用nmap来做端口扫描，其实它还可以进行攻击尝试。 [Figure] 参考http://www.mottoin.com/sole/topic/85401.html","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"内网渗透","slug":"内网渗透","count":5,"path":"api/tags/内网渗透.json"}]},{"title":"内网 ARP简单了解","slug":"内网-ARP简单了解","date":"2018-12-08T12:34:53.000Z","updated":"2018-12-22T12:59:35.752Z","comments":true,"path":"api/articles/内网-ARP简单了解.json","excerpt":"<h1 id=\"内网-ARP\"><a href=\"#内网-ARP\" class=\"headerlink\" title=\"内网 ARP\"></a>内网 ARP</h1>","keywords":null,"cover":"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/内网渗透/ARP_tu.png","content":null,"text":"内网 ARP [Figure] 推荐一个 arp 讲解的帖子，写的很好：图解ARP协议（一）图解ARP协议（二）ARP攻击篇图解ARP协议（三）ARP防御篇-如何揪出”内鬼”并”优雅的还手”?图解ARP协议（四）代理ARP：善意的欺骗图解ARP协议（五）免费ARP：地址冲突了肿么","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"内网渗透","slug":"内网渗透","count":5,"path":"api/tags/内网渗透.json"}]},{"title":"内网定位总结","slug":"内网定位总结","date":"2018-12-06T13:39:52.000Z","updated":"2018-12-22T12:44:26.497Z","comments":true,"path":"api/articles/内网定位总结.json","excerpt":"<h1 id=\"内网渗透测试定位技术总结\"><a href=\"#内网渗透测试定位技术总结\" class=\"headerlink\" title=\"内网渗透测试定位技术总结\"></a>内网渗透测试定位技术总结</h1><h2 id=\"服务器（机器）定位\"><a href=\"#服务器（机器）定位\" class=\"headerlink\" title=\"服务器（机器）定位\"></a>服务器（机器）定位</h2>","keywords":null,"cover":"https://bj.bcebos.com/v1/image-langke/hexo-neirongpeitu/内网渗透/组织结构_.png","content":null,"text":"内网渗透测试定位技术总结服务器（机器）定位收集域以及域内用户信息收集域内域控制器信息收集域控上域用户登录登录日志信息收集域内所有用户名以及全名、备注等信息收集域内工作组信息收集域管理员账号信息收集域内网段划分信息收集域内组织单位信息常用命令net view查看域内用户列表<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"内网渗透","slug":"内网渗透","count":5,"path":"api/tags/内网渗透.json"}]},{"title":"内网渗透思路","slug":"内网渗透思路","date":"2018-12-06T12:02:03.000Z","updated":"2018-12-22T12:58:51.616Z","comments":true,"path":"api/articles/内网渗透思路.json","excerpt":"<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><h3 id=\"国外流程\"><a href=\"#国外流程\" class=\"headerlink\" title=\"国外流程\"></a>国外流程</h3><ul>\n<li>侦查阶段</li>\n</ul>\n<p>收集攻击目标的信息</p>","keywords":null,"cover":null,"content":null,"text":"流程国外流程侦查阶段收集攻击目标的信息武器化阶段构建可能可以使用的攻击工具，可以说是广义角度的渗透传递阶段通过某种方法将攻击工具发送到攻击目标利用阶段由攻击工具触发系统中的漏洞安装阶段执行恶意脚本/安装恶意程序命令&amp;控制阶段在攻击目标上开启后门，通过后门传递指令，控制攻击","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"内网渗透","slug":"内网渗透","count":5,"path":"api/tags/内网渗透.json"}]},{"title":"关于渗透测试面试","slug":"关于渗透测试面试","date":"2018-12-06T07:01:07.000Z","updated":"2018-12-06T12:17:36.789Z","comments":true,"path":"api/articles/关于渗透测试面试.json","excerpt":"不属于技术文章，未能公开，请谅解.","keywords":null,"cover":null,"content":null,"text":"不输入密码不可以看幺！.         Decrypt      U2FsdGVkX1+ZhThjyDyuof1mnsdHc0w33ZyzQi55Ie8hFjb8ZFHNgqrzGmxUjWwlJPr6kAFA0lv6rxZe0a9W1L2vH1LGuHr7hzfvVqML4a","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"面试","slug":"面试","count":1,"path":"api/tags/面试.json"}]}]}