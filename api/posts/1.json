{"total":7,"pageSize":10,"pageCount":1,"data":[{"title":"Hello World","slug":"hello-world","date":"2018-09-24T16:07:13.126Z","updated":"2018-09-24T16:07:13.126Z","comments":true,"path":"api/articles/hello-world.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"提权(一)-Windows系统","slug":"提权-一-Windows系统","date":"2018-09-24T07:41:06.000Z","updated":"2018-09-25T02:47:29.185Z","comments":true,"path":"api/articles/提权-一-Windows系统.json","excerpt":"<h4 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h4><blockquote>\n<ul>\n<li>这篇文章主要是为了总结一下这几天的成果。</li>\n<li>在此梳理以及记录，方便日后查看，复习。  </li>\n</ul>\n</blockquote>\n<h2 id=\"Windows基础提权命令\"><a href=\"#Windows基础提权命令\" class=\"headerlink\" title=\"Windows基础提权命令\"></a>Windows基础提权命令</h2><blockquote>\n<h5 id=\"查看系统信息\"><a href=\"#查看系统信息\" class=\"headerlink\" title=\"查看系统信息\"></a>查看系统信息</h5><blockquote>\n<p><code>systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;</code><br>比如：<code>systeminfo | findstr /C:&quot;OS 名称&quot;</code><br><img src=\"/img/systeminfo_.png\" alt=\"演示\"></p>\n</blockquote>\n<h5 id=\"主机名\"><a href=\"#主机名\" class=\"headerlink\" title=\"主机名\"></a>主机名</h5><blockquote>\n<p><code>Hostname</code><br>","keywords":null,"cover":"/img/systeminfo_.png","content":null,"text":"前情提要这篇文章主要是为了总结一下这几天的成果。在此梳理以及记录，方便日后查看，复习。  Windows基础提权命令查看系统信息systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;<br>比如：syst","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Equity","slug":"Equity","count":1,"path":"api/tags/Equity.json"}]},{"title":"文件操作小脚本","slug":"文件操作小脚本","date":"2018-09-19T07:54:47.000Z","updated":"2018-09-24T08:07:18.238Z","comments":true,"path":"api/articles/文件操作小脚本.json","excerpt":"","keywords":null,"cover":"/img/listdir_s.png","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><blockquote>\n<p>由于要处理大批量的文件，没有找到对应的工具。主要是 <em>python</em> 好用。<br>话不多说，直接上代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3 </span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> docx</span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义几个全局变量</span></span><br><span class=\"line\">path1 = <span class=\"string\">'C:\\\\Users\\\\langke\\\\Documents\\\\漏洞描述模版-图\\\\'</span></span><br><span class=\"line\">path2 = <span class=\"string\">'C:\\\\Users\\\\langke\\\\Desktop\\\\'</span></span><br><span class=\"line\">PATH3 = os.path.abspath(<span class=\"string\">'.'</span>)+<span class=\"string\">\"\\\\\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取符合条件的文件名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_FileName</span><span class=\"params\">(search,position=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">\t<span class=\"comment\"># 获取指定目录下的所有指定后缀的文件名</span></span><br><span class=\"line\">\tf_list = os.listdir(PATH3)</span><br><span class=\"line\">\t<span class=\"comment\"># print(f_list)  获取指定目录下所有文件名和文件夹名</span></span><br><span class=\"line\">\tfile_fuhe = []</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> f_list:</span><br><span class=\"line\">\t\t<span class=\"comment\"># os.path.splitext(i)   分割文件名和后缀</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> os.path.splitext(i)[<span class=\"number\">1</span>] == <span class=\"string\">'.docx'</span>:</span><br><span class=\"line\">\t\t\t<span class=\"comment\"># print(i)  输出文件名</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>:\t</span><br><span class=\"line\">\t\t\t\tdata = docx.Document(PATH3+i) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">\t\t\t\tprint(e)\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> index,para <span class=\"keyword\">in</span> enumerate(data.paragraphs):</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># 判断想处理的内容</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> search <span class=\"keyword\">in</span> para.text:</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> position:\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\tprint(<span class=\"string\">\"=\"</span>*<span class=\"number\">30</span>)</span><br><span class=\"line\">\t\t\t\t\t\tprint(<span class=\"string\">\"在第%d行\"</span> % index,<span class=\"string\">\"文件名是：\"</span>+i)</span><br><span class=\"line\">\t\t\t\t\t\tprint(<span class=\"string\">\"=\"</span>*<span class=\"number\">30</span>)</span><br><span class=\"line\">\t\t\t\t\tfile_fuhe.append(i)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> file_fuhe:</span><br><span class=\"line\">\t\texit(<span class=\"string\">\"\\n***没有匹配到！***\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> file_fuhe\t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#用来删除文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_FileName</span><span class=\"params\">(delnames)</span>:</span></span><br><span class=\"line\">\tprint(<span class=\"string\">\"\\n\\t###\\n\\t将要删除以下文件：\\n\\t###\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> delname <span class=\"keyword\">in</span> delnames:</span><br><span class=\"line\">\t\tprint(delname)</span><br><span class=\"line\">\t\tqq = str(input(<span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\t\t++++++++++++++++++++++++++++++++</span></span><br><span class=\"line\"><span class=\"string\">\t\t确定要删除吗？确定请按 y 并回车。</span></span><br><span class=\"line\"><span class=\"string\">\t\t++++++++++++++++++++++++++++++++</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\"\"\"</span>))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> qq == <span class=\"string\">\"y\"</span>:</span><br><span class=\"line\">\t\t\tos.remove(delname)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tparser = argparse.ArgumentParser(description=<span class=\"string\">'可以对文件进行你想要的操作'</span>)</span><br><span class=\"line\">\tparser.add_argument(<span class=\"string\">'-s'</span>,dest=<span class=\"string\">'search'</span>,help=<span class=\"string\">'输入想要搜索的内容,比如：-s \"你好\"'</span>)</span><br><span class=\"line\">\tparser.add_argument(<span class=\"string\">'-d'</span>,dest=<span class=\"string\">'dirs'</span>,help=<span class=\"string\">'''输入想要操作的目录，默认当前目录。</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\t\t格式如：-d \"C:\\\\\\\\Users\\\\\\\\langke\\\\\\\\Desktop\\\\\\\\\"'''</span>)</span><br><span class=\"line\">\tparser.add_argument(<span class=\"string\">'-p'</span>,dest=<span class=\"string\">'position'</span>,help=<span class=\"string\">'如果想查看匹配到的内容在文件中的位置，请指定该参数。如： -p 1'</span>)</span><br><span class=\"line\">\targs = parser.parse_args()</span><br><span class=\"line\">\tsearch = args.search</span><br><span class=\"line\">\tdirs = args.dirs</span><br><span class=\"line\">\tposition = args.position</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> search:</span><br><span class=\"line\">\t\texit(<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t========================================</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t没有指定要搜索的内容,按 -h 获取更多帮助</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t========================================</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t'''</span>)</span><br><span class=\"line\">\tdel_FileName(get_FileName(search=search,position=position))</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p><img src=\"/img/listdir_s.png\" alt=\"示例\"></p>\n<p>不足的地方，自行更改。。</p>\n","text":"前情提要由于要处理大批量的文件，没有找到对应的工具。主要是 python 好用。<br>话不多说，直接上代码：<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"python工具","slug":"python工具","count":1,"path":"api/tags/python工具.json"}]},{"title":"hexo设置跳过渲染某个文件或文件夹","slug":"hexo设置跳过渲染某个文件或文件夹","date":"2018-09-18T12:50:57.000Z","updated":"2018-09-18T13:27:15.499Z","comments":true,"path":"api/articles/hexo设置跳过渲染某个文件或文件夹.json","excerpt":"","keywords":null,"cover":null,"content":"<h3 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a><strong>前情提要</strong></h3><p>需要在<code>source*</code>目录下填加一个<code>demos</code>目录放一些示例文件，<strong>hexo</strong>默认会编译<code>source</code>目录下的所有文件。但<code>demos</code>目录并不需要编译，<code>_config.yml</code>有提供一个配置项<em><code>skip_render</code></em>来设置跳过渲染的文件及文件夹。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 跳过单个文件</span><br><span class=\"line\">skip_render: test.html</span><br><span class=\"line\"></span><br><span class=\"line\">// 跳过所有的html的文件</span><br><span class=\"line\">skip_render: &apos;*.html&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// 跳过目录下所有文件</span><br><span class=\"line\">skip_render: about/*</span><br><span class=\"line\"></span><br><span class=\"line\">//跳过某一目录下的所有文件夹和子目录</span><br><span class=\"line\">skip_render: test/**</span><br><span class=\"line\"></span><br><span class=\"line\">//跳过多个目录，或者多个文件的渲染</span><br><span class=\"line\">skip_render: [&apos;*.html&apos;, demos/**, test/*]</span><br></pre></td></tr></table></figure></p>\n","text":"前情提要需要在source*目录下填加一个demos目录放一些示例文件，hexo默认会编译source目录下的所有文件。但demos目录并不需要编译，_config.yml有提供一个配置项skip_render来设置跳过渲染的文件及文件夹。<br>1<br>2<br>3<br>4","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"网站相关","slug":"网站相关","count":1,"path":"api/tags/网站相关.json"}]},{"title":"从源码分析sentry的错误信息收集","slug":"从源码分析sentry的错误信息收集","date":"2018-08-18T11:23:55.000Z","updated":"2018-09-18T07:26:28.556Z","comments":true,"path":"api/articles/从源码分析sentry的错误信息收集.json","excerpt":"","keywords":null,"cover":null,"content":"<p>raven.js 是 sentry 为 JavaScript 错误上报提供的 JS-SDK，本篇我们基于其源代码对其原理进行分析，本篇文章只分析前端部分，对应的文件目录是<code>https://github.com/getsentry/sentry-javascript/tree/master/packages/raven-js</code>。</p>\n<p>首先抛出几个问题：</p>\n<ul>\n<li><strong>raven.js 是如何收集浏览器错误信息的？</strong></li>\n<li><strong>raven.js 上报的错误信息格式是什么样的？又是如何把这些信息传给后端？支不支持合并上报？</strong></li>\n<li><strong>面包屑（breadcrumbs）是什么？raven.js 如何来收集面包屑信息？</strong></li>\n<li><strong>raven.js 如何和框架配合使用（比如 vue、react）？</strong></li>\n</ul>\n<p>在回答以上这几个问题之前，我们首先来对 raven.js 做一个宏观的分析，主要涉及其文件目录、所引用的第三方框架等。</p>\n<p>raven.js 的核心文件内容并不多，其中使用了三个第三方库，放在了 vendor 文件夹下：</p>\n<ul>\n<li><a href=\"https://github.com/moll/json-stringify-safe\" target=\"_blank\" rel=\"noopener\">json-stringify-safe</a> ：一个对 <code>JSON.stringify</code> 的封装，安全的 json 序列化操作函数，不会抛出循环引用的错误。<ul>\n<li>这里面有一个注意点要单独说一下，我们熟知的 <code>JSON.stringify</code> , 可以接受三个参数：第一个参数是我们要序列化的对象；第二个参数是对其中键值对的处理函数；第三个参数是控制缩进空格。reven.js 的 <code>json-stringify-safe</code> 就是充分利用了这三个参数。</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/blueimp/JavaScript-MD5\" target=\"_blank\" rel=\"noopener\">md5</a>：js 的 md5 函数。</li>\n<li><a href=\"https://github.com/csnover/TraceKit\" target=\"_blank\" rel=\"noopener\">TraceKit</a>：TraceKit 是一个已经比较完善的错误收集、堆栈格式化的库，reven.js 的功能在很大程度上对它有所依赖。</li>\n</ul>\n<p>除此之外，raven.js 支持插件，官方提供的一些知名库的 sentry 插件主要放在了 plugin 文件夹下面，raven.js 的一些核心文件，则放在了 src 文件夹下面。</p>\n<h3 id=\"raven-js-是如何收集错误信息的？\"><a href=\"#raven-js-是如何收集错误信息的？\" class=\"headerlink\" title=\"raven.js 是如何收集错误信息的？\"></a>raven.js 是如何收集错误信息的？</h3><p>我们知道，在前端收集错误，肯定离不开 <code>window.onerror</code> 这个函数，那么我们就从这个函数说起。</p>\n<p>实际上，这部分工作是 raven.js 引用的第三方库 TraceKit 完成的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function installGlobalHandler() &#123;</span><br><span class=\"line\">  if (_onErrorHandlerInstalled) &#123; // 一个起到标志作用的全局变量</span><br><span class=\"line\">    return;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _oldOnerrorHandler = _window.onerror; </span><br><span class=\"line\">  // _oldOnerrorHandler 是防止对用户其他地方定义的回调函数进行覆盖</span><br><span class=\"line\">  // 该 _window 经过兼容，实际上就是 window</span><br><span class=\"line\">  _window.onerror = traceKitWindowOnError;</span><br><span class=\"line\">  _onErrorHandlerInstalled = true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相关错误回调函数交给 traceKitWindowOnError 处理，下面我们来看一下 traceKitWindowOnError 函数，为了避免太多冗余代码，我们仅分析一种主要情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function traceKitWindowOnError(msg, url, lineNo, colNo, ex) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvar exception = utils.isErrorEvent(ex) ? ex.error : ex;</span><br><span class=\"line\">\t//...</span><br><span class=\"line\">    stack = TraceKit.computeStackTrace(exception);</span><br><span class=\"line\">    notifyHandlers(stack, true);</span><br><span class=\"line\">    //...</span><br><span class=\"line\">   </span><br><span class=\"line\">    //...</span><br><span class=\"line\">    if (_oldOnerrorHandler) &#123;</span><br><span class=\"line\">       return _oldOnerrorHandler.apply(this, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中调用的最重要的一个函数，就是 computeStackTrace，而这个函数也是 TraceKit 的核心函数，简单来讲，它做的事情就是统一格式化报错信息调用栈，因为对于各个浏览器来说，返回的 Error 调用栈信息格式不尽相同，另外甚至还有的浏览器并不返回调用栈，computeStackTrace 函数对这些情况都做了兼容性处理，并且对于一些不返回调用栈的情况，还使用了 caller 来向上回溯函数的调用栈，最终把报错信息转化成一个键相同的对象数组，做到了报错信息格式的统一。</p>\n<p>notifyHandlers 函数则是通知相关的回调函数。 实际上，raven.js 在 install 函数中会调用 TraceKit.report.subscribe 函数，并把对错误的处理逻辑写入回调：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function subscribe(handler) &#123;</span><br><span class=\"line\">    installGlobalHandler();</span><br><span class=\"line\">    handlers.push(handler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上过程完成了错误处理过程中的负责角色转换，并且借助 TraceKit，可以使 raven.js 得到一个结构比较清晰的带有格式化好的调用栈信息的错误内容对象，之后，raven.js 对错误内容进一步处理并最终上报。</p>\n<p>下面我们对错误处理 raven.js 控制的部分做了一些梳理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> _handleOnErrorStackInfo: function(stackInfo, options) &#123;</span><br><span class=\"line\">    options.mechanism = options.mechanism || &#123;</span><br><span class=\"line\">      type: &apos;onerror&apos;,</span><br><span class=\"line\">      handled: false</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    // mechanism 和错误统计来源有关</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!this._ignoreOnError) &#123;</span><br><span class=\"line\">      this._handleStackInfo(stackInfo, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">_handleStackInfo: function(stackInfo, options) &#123;</span><br><span class=\"line\">    var frames = this._prepareFrames(stackInfo, options);</span><br><span class=\"line\"></span><br><span class=\"line\">    this._triggerEvent(&apos;handle&apos;, &#123;</span><br><span class=\"line\">      stackInfo: stackInfo,</span><br><span class=\"line\">      options: options</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    this._processException(</span><br><span class=\"line\">      stackInfo.name,</span><br><span class=\"line\">      stackInfo.message,</span><br><span class=\"line\">      stackInfo.url,</span><br><span class=\"line\">      stackInfo.lineno,</span><br><span class=\"line\">      frames,</span><br><span class=\"line\">      options</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">_processException: function(type, message, fileurl, lineno, frames, options) &#123;</span><br><span class=\"line\">    // 首先根据 message 信息判断是否是需要忽略的错误类型</span><br><span class=\"line\">    // 然后判断出错的文件是否在黑名单中或者白名单中</span><br><span class=\"line\">    // 接下来对错误内容进行必要的整合与转换，构造出 data 对象</span><br><span class=\"line\">    // 最后调用上报函数</span><br><span class=\"line\">    this._send(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_send: function(data) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 对 data 进一步处理，增加必要的信息，包括后续会提到的面包屑信息</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 交由 _sendProcessedPayload 进行进一步处理</span><br><span class=\"line\">\tthis._sendProcessedPayload(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_sendProcessedPayload: function(data, callback) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 对 data 增加一些必要的元信息</span><br><span class=\"line\">\t// 可以通过自定义 globalOptions.transport 的方式来自定义上报函数 </span><br><span class=\"line\">\t(globalOptions.transport || this._makeRequest).call(this, &#123;</span><br><span class=\"line\">\t     url: url,</span><br><span class=\"line\">\t     auth: auth,</span><br><span class=\"line\">\t     data: data,</span><br><span class=\"line\">\t     options: globalOptions,</span><br><span class=\"line\">\t     onSuccess: function success() &#123;</span><br><span class=\"line\">\t       </span><br><span class=\"line\">\t     &#125;,</span><br><span class=\"line\">\t     onError: function failure(error) &#123;</span><br><span class=\"line\">\t       </span><br><span class=\"line\">\t     &#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">// 真正发起请求的函数</span><br><span class=\"line\">_makeRequest: function(opts) &#123;</span><br><span class=\"line\">\t// 对于支持 fetch 的浏览器，直接使用 fetch 的方式发送 POST 请求</span><br><span class=\"line\">\t// 如果浏览器不支持 fetch，则使用 XHR 的传统方式发送 POST 请求</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\">实际上我们可以发现，从拿到已经初步格式化的报错信息，到最终真正执行数据上报，raven.js 的过程非常漫长，这其中我分析有如下几个原因：</span><br><span class=\"line\"></span><br><span class=\"line\">* 每个函数只处理一件或者一些事情，保持函数的短小整洁。</span><br><span class=\"line\">* 部分函数可以做到复用（因为除了自动捕获错误的方式， raven.js 还提供通过 captureException，即 `try &#123;</span><br><span class=\"line\">    doSomething(a[0])</span><br><span class=\"line\">&#125; catch(e) &#123;</span><br><span class=\"line\">    Raven.captureException(e)</span><br><span class=\"line\">&#125;` 的方式来上报错误，两个过程中有一些函数的调用是有重叠的）。</span><br><span class=\"line\"></span><br><span class=\"line\">但是笔者认为，raven.js 的代码设计还有很多值得优化的地方，比如：</span><br><span class=\"line\"></span><br><span class=\"line\">* 对最终上报数据（data）的属性处理和增加分散在多个函数，并且有较多可选项目，很难梳理出一个完整的 data 格式，并且不便于维护。</span><br><span class=\"line\">* 部分函数的拆分必要性不足，并且会增加链路的复杂性，比如 `_processException `、`_sendProcessedPayload `、`_makeRequest `等都只在一个链路中被调用一次。</span><br><span class=\"line\">* 部分属性重命名会造成资源浪费，由于 TraceKit 部分最终返回的数据格式并不完全满足 raven.js 的需要，所以 raven.js 之后又在较后阶段进行了重命名等处理，实际上这些内容完全可以通过一些其他的方式避免。</span><br><span class=\"line\"></span><br><span class=\"line\">最后，非常遗憾，sentry 目前完全不支持合并上报，就算是在同一个事件循环（甚至事件循环的同一个阶段，关于事件循环，可以参考我之前绘制的[一张图](https://www.processon.com/view/link/5b6ec8cbe4b053a09c2fb977)）的两个错误，sentry 都是分开来上报的，这里有一个简单例子：</span><br><span class=\"line\"></span><br><span class=\"line\">```javascript</span><br><span class=\"line\">Raven.config(&apos;http://8ec3f1a9f652463bb58191bd0b35f20c@localhost:9000/2&apos;).install()</span><br><span class=\"line\">let s = window.ss;</span><br><span class=\"line\"></span><br><span class=\"line\">try&#123;</span><br><span class=\"line\">    let b = s.b</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">    Raven.captureException(e)</span><br><span class=\"line\">    // sentry should report error now</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">s.nomethod();</span><br><span class=\"line\">// sentry should report error now</span><br></pre></td></tr></table></figure>\n<p>以上例子中，sentry 会发送两个 POST 请求。</p>\n<h3 id=\"raven-js-最终上报数据的格式\"><a href=\"#raven-js-最终上报数据的格式\" class=\"headerlink\" title=\"raven.js 最终上报数据的格式\"></a>raven.js 最终上报数据的格式</h3><p>这一部分，我们并不会详细地分析 raven.js 上报的数据的每一项内容，仅会给读者展示一个比较典型的情况。</p>\n<p>我们看一下对于一个一般的 js 错误，raven.js 上报的 json 中包含哪些内容，下面是一个已经删掉一些冗余内容的典型上报信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;project&quot;: &quot;2&quot;,</span><br><span class=\"line\">  &quot;logger&quot;: &quot;javascript&quot;,</span><br><span class=\"line\">  &quot;platform&quot;: &quot;javascript&quot;,</span><br><span class=\"line\">  &quot;request&quot;: &#123;</span><br><span class=\"line\">    &quot;headers&quot;: &#123;</span><br><span class=\"line\">      &quot;User-Agent&quot;: &quot;Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;exception&quot;: &#123;</span><br><span class=\"line\">    &quot;values&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;type&quot;: &quot;TypeError&quot;,</span><br><span class=\"line\">        &quot;value&quot;: &quot;Cannot read property &apos;b&apos; of undefined&quot;,</span><br><span class=\"line\">        &quot;stacktrace&quot;: &#123;</span><br><span class=\"line\">          &quot;frames&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              &quot;filename&quot;: &quot;http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu&quot;,</span><br><span class=\"line\">              &quot;lineno&quot;: 19,</span><br><span class=\"line\">              &quot;colno&quot;: 19,</span><br><span class=\"line\">              &quot;function&quot;: &quot;?&quot;,</span><br><span class=\"line\">              &quot;in_app&quot;: true</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;mechanism&quot;: &#123;</span><br><span class=\"line\">      &quot;type&quot;: &quot;generic&quot;,</span><br><span class=\"line\">      &quot;handled&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;transaction&quot;: &quot;http://localhost:63342/sentry-test1/test1.html?_ijt=j54dmgn136gom08n8v8v9fdddu&quot;,</span><br><span class=\"line\">  &quot;extra&quot;: &#123;</span><br><span class=\"line\">    &quot;session:duration&quot;: 6</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;breadcrumbs&quot;: &#123;</span><br><span class=\"line\">    &quot;values&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;timestamp&quot;: 1534257309.996,</span><br><span class=\"line\">        &quot;message&quot;: &quot;_prepareFrames stackInfo: [object Object]&quot;,</span><br><span class=\"line\">        &quot;level&quot;: &quot;log&quot;,</span><br><span class=\"line\">        &quot;category&quot;: &quot;console&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">   ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;event_id&quot;: &quot;ea0334adaf9d43b78e72da2b10e084a9&quot;,</span><br><span class=\"line\">  &quot;trimHeadFrames&quot;: 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中支持的信息类型重点分为以下几种：</p>\n<ul>\n<li>sentry 基本配置信息，包括库本身的配置和使用者的配置信息，以及用户的一些自定义信息</li>\n<li>错误信息，主要包括错误调用栈信息</li>\n<li>request 信息，主要包括浏览器的 User-Agent、当前请求地址等</li>\n<li>面包屑信息，关于面包屑具体指的是什么，我们会在下一环节进行介绍</li>\n</ul>\n<h3 id=\"raven-js-面包屑收集\"><a href=\"#raven-js-面包屑收集\" class=\"headerlink\" title=\"raven.js 面包屑收集\"></a>raven.js 面包屑收集</h3><p>面包屑信息，也就是错误在发生之前，一些用户、浏览器的行为信息，raven.js 实现了一个简单的队列（有一个最大条目长度，默认为 100），这个队列在时刻记录着这些信息，一旦错误发生并且需要上报，raven.js 就把这个队列的信息内容，作为面包屑 breadcrumbs，发回客户端。</p>\n<p>面包屑信息主要包括这几类：</p>\n<ul>\n<li>用户对某个元素的点击或者用户对某个可输入元素的输入</li>\n<li>发送的 http 请求</li>\n<li>console 打印的信息（支持配置 ‘debug’, ‘info’, ‘warn’, ‘error’, ‘log’ 等不同级别）</li>\n<li>window.location 变化信息</li>\n</ul>\n<p>接下来，我们对这几类面包屑信息 sentry 的记录实现进行简单的分析。</p>\n<p>实际上，sentry 对这些信息记录的方式比较一致，都是通过对原声的函数进行包装，并且在包装好的函数中增加自己的钩子函数，来实现触发时候的事件记录，实际上，sentry 总共包装的函数有：</p>\n<ul>\n<li>window.setTimeout</li>\n<li>window.setInterval</li>\n<li>window.requestAnimationFrame</li>\n<li>EventTarget.addEventListener</li>\n<li>EventTarget.removeEventListener</li>\n<li>XMLHTTPRequest.open</li>\n<li>XMLHTTPRequest.send</li>\n<li>window.fetch</li>\n<li>History.pushState</li>\n<li>History.replaceState</li>\n</ul>\n<blockquote>\n<p>备注：这里包装的所有函数，其中有一部分只是使 raven.js 具有捕获回调函数中错误的能力（对回调函数进行包装）</p>\n</blockquote>\n<p>接下来我们看一段典型的代码，来分析 raven.js 是如何记录用户的点击和输入信息的（通过对 EventTarget.addEventListener 进行封装）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapEventTarget</span>(<span class=\"params\">global</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> proto = _window[global] &amp;&amp; _window[global].prototype;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (proto &amp;&amp; proto.hasOwnProperty &amp;&amp; proto.hasOwnProperty(<span class=\"string\">'addEventListener'</span>)) &#123;</span><br><span class=\"line\">        fill(</span><br><span class=\"line\">          proto,</span><br><span class=\"line\">          <span class=\"string\">'addEventListener'</span>,</span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">orig</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evtName, fn, capture, secure</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fn &amp;&amp; fn.handleEvent) &#123; <span class=\"comment\">//兼容通过 handleEvent 的方式进行绑定事件</span></span><br><span class=\"line\">                  fn.handleEvent = self.wrap(</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                      mechanism: &#123;</span><br><span class=\"line\">                        type: <span class=\"string\">'instrument'</span>,</span><br><span class=\"line\">                        data: &#123;</span><br><span class=\"line\">                          target: global,</span><br><span class=\"line\">                          <span class=\"function\"><span class=\"keyword\">function</span>: '<span class=\"title\">handleEvent</span>',</span></span><br><span class=\"line\"><span class=\"function\">                          <span class=\"title\">handler</span>: (<span class=\"params\">fn &amp;&amp; fn.name</span>) || '&lt;<span class=\"title\">anonymous</span>&gt;'</span></span><br><span class=\"line\"><span class=\"function\">                        &#125;</span></span><br><span class=\"line\"><span class=\"function\">                      &#125;</span></span><br><span class=\"line\"><span class=\"function\">                    &#125;,</span></span><br><span class=\"line\"><span class=\"function\">                    <span class=\"title\">fn</span>.<span class=\"title\">handleEvent</span></span></span><br><span class=\"line\"><span class=\"function\">                  );</span></span><br><span class=\"line\"><span class=\"function\">                &#125;</span></span><br><span class=\"line\"><span class=\"function\">              &#125; <span class=\"title\">catch</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">var</span> before, clickHandler, keypressHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                autoBreadcrumbs &amp;&amp;</span><br><span class=\"line\">                autoBreadcrumbs.dom &amp;&amp;</span><br><span class=\"line\">                (global === <span class=\"string\">'EventTarget'</span> || global === <span class=\"string\">'Node'</span>)</span><br><span class=\"line\">              ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> generating multiple handlers per addEventListener invocation, should</span></span><br><span class=\"line\">                <span class=\"comment\">//       revisit and verify we can just use one (almost certainly)</span></span><br><span class=\"line\">                clickHandler = self._breadcrumbEventHandler(<span class=\"string\">'click'</span>);</span><br><span class=\"line\">                keypressHandler = self._keypressEventHandler();</span><br><span class=\"line\">                before = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123; <span class=\"comment\">// 钩子函数，用于在回调函数调用的时候记录信息</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (!evt) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"keyword\">var</span> eventType;</span><br><span class=\"line\">                  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    eventType = evt.type;</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// just accessing event properties can throw an exception in some rare circumstances</span></span><br><span class=\"line\">                    <span class=\"comment\">// see: https://github.com/getsentry/raven-js/issues/838</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (eventType === <span class=\"string\">'click'</span>) <span class=\"keyword\">return</span> clickHandler(evt);</span><br><span class=\"line\">                  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (eventType === <span class=\"string\">'keypress'</span>) <span class=\"keyword\">return</span> keypressHandler(evt);</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> orig.call(</span><br><span class=\"line\">                <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                evtName,</span><br><span class=\"line\">                self.wrap(</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                    mechanism: &#123;</span><br><span class=\"line\">                      type: <span class=\"string\">'instrument'</span>,</span><br><span class=\"line\">                      data: &#123;</span><br><span class=\"line\">                        target: global,</span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">function</span>: '<span class=\"title\">addEventListener</span>',</span></span><br><span class=\"line\"><span class=\"function\">                        <span class=\"title\">handler</span>: (<span class=\"params\">fn &amp;&amp; fn.name</span>) || '&lt;<span class=\"title\">anonymous</span>&gt;'</span></span><br><span class=\"line\"><span class=\"function\">                      &#125;</span></span><br><span class=\"line\"><span class=\"function\">                    &#125;</span></span><br><span class=\"line\"><span class=\"function\">                  &#125;,</span></span><br><span class=\"line\"><span class=\"function\">                  <span class=\"title\">fn</span>,</span></span><br><span class=\"line\"><span class=\"function\">                  <span class=\"title\">before</span></span></span><br><span class=\"line\"><span class=\"function\">                ),</span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"title\">capture</span>,</span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"title\">secure</span></span></span><br><span class=\"line\"><span class=\"function\">              );</span></span><br><span class=\"line\"><span class=\"function\">            &#125;;</span></span><br><span class=\"line\"><span class=\"function\">          &#125;,</span></span><br><span class=\"line\"><span class=\"function\">          <span class=\"title\">wrappedBuiltIns</span></span></span><br><span class=\"line\"><span class=\"function\">        );</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">fill</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          proto,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          <span class=\"string\">'removeEventListener'</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">          function(orig</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt, fn, capture, secure</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fn = fn &amp;&amp; (fn.__raven_wrapper__ ? fn.__raven_wrapper__ : fn);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore, accessing __raven_wrapper__ will throw in some Selenium environments</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> orig.call(<span class=\"keyword\">this</span>, evt, fn, capture, secure);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          wrappedBuiltIns</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码兼容了通过 handleEvent 的方式进行绑定事件（如果没有听说过这种方式，可以在<a href=\"http://www.ayqy.net/blog/handleevent%E4%B8%8Eaddeventlistener/\" target=\"_blank\" rel=\"noopener\">这里</a>补充一些相关的知识）。</p>\n<p>默认情况下，raven.js 只记录通过 <code>EventTarget.addEventListener</code> 绑定的点击和输入信息，实际上这是比较科学的，并且这些信息较为有效。另外，raven.js 也提供了记录所有点击和输入信息的可选项，其实现方式更为简单，直接在 document 上添加相关的监听即可。</p>\n<h3 id=\"raven-js-如何和框架配合使用\"><a href=\"#raven-js-如何和框架配合使用\" class=\"headerlink\" title=\"raven.js 如何和框架配合使用\"></a>raven.js 如何和框架配合使用</h3><p>raven.js 和框架配合使用的方式非常简单，但是我们要知道，很多框架内置了错误边界处理，或者对错误进行转义。以至于我们通过 window.onerror 的方式得不到完整的错误信息。同时，有些框架提供了错误处理的接口（比如 vue），利用错误处理的接口，我们能够获取到和错误有关的更多更重要的信息。</p>\n<p>raven.js 利用各个框架的官方接口，提供了 vue、require.js、angular、ember、react-native 等各个框架的官方插件。</p>\n<p>插件内容本身非常简单，我们可以看一下 vue 插件的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function formatComponentName(vm) &#123;</span><br><span class=\"line\">  if (vm.$root === vm) &#123;</span><br><span class=\"line\">    return &apos;root instance&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var name = vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    (name ? &apos;component &lt;&apos; + name + &apos;&gt;&apos; : &apos;anonymous component&apos;) +</span><br><span class=\"line\">    (vm._isVue &amp;&amp; vm.$options.__file ? &apos; at &apos; + vm.$options.__file : &apos;&apos;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function vuePlugin(Raven, Vue) &#123;</span><br><span class=\"line\">  Vue = Vue || window.Vue;</span><br><span class=\"line\"></span><br><span class=\"line\">  // quit if Vue isn&apos;t on the page</span><br><span class=\"line\">  if (!Vue || !Vue.config) return;</span><br><span class=\"line\"></span><br><span class=\"line\">  var _oldOnError = Vue.config.errorHandler;</span><br><span class=\"line\">  Vue.config.errorHandler = function VueErrorHandler(error, vm, info) &#123;</span><br><span class=\"line\">    var metaData = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // vm and lifecycleHook are not always available</span><br><span class=\"line\">    if (Object.prototype.toString.call(vm) === &apos;[object Object]&apos;) &#123;</span><br><span class=\"line\">      metaData.componentName = formatComponentName(vm);</span><br><span class=\"line\">      metaData.propsData = vm.$options.propsData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (typeof info !== &apos;undefined&apos;) &#123;</span><br><span class=\"line\">      metaData.lifecycleHook = info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Raven.captureException(error, &#123;</span><br><span class=\"line\">      extra: metaData</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (typeof _oldOnError === &apos;function&apos;) &#123;</span><br><span class=\"line\">      _oldOnError.call(this, error, vm, info);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = vuePlugin;</span><br></pre></td></tr></table></figure>\n<p>应该不用进行过多解释。</p>\n<p>你也许想知道为什么没有提供 react 插件，事实上，react 16 以后才引入了<a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\" target=\"_blank\" rel=\"noopener\">Error Boundaries</a>，这种方式由于灵活性太强，并不太适合使用插件，另外，就算不使用插件，也非常方便地使用 raven.js 进行错误上报，可以参考<a href=\"https://docs.sentry.io/clients/javascript/integrations/react/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<blockquote>\n<p>但笔者认为，目前 react 的引入方式会对源代码进行侵入，并且比较难通过构建的方式进行 sentry 的配置，也许我们可以寻找更好的方式。</p>\n</blockquote>\n<p>完。</p>\n","text":"raven.js 是 sentry 为 JavaScript 错误上报提供的 JS-SDK，本篇我们基于其源代码对其原理进行分析，本篇文章只分析前端部分，对应的文件目录是https://github.com/getsentry/sentry-javascript/tree/mas","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"javascript","slug":"javascript","count":2,"path":"api/tags/javascript.json"},{"name":"前端监控","slug":"前端监控","count":1,"path":"api/tags/前端监控.json"}]},{"title":"十条编写优化的 JavaScript 代码的建议","slug":"十条编写优化的JavaScript代码的建议","date":"2018-05-29T08:59:40.000Z","updated":"2018-09-18T07:26:28.556Z","comments":true,"path":"api/articles/十条编写优化的JavaScript代码的建议.json","excerpt":"","keywords":null,"cover":null,"content":"<p>本文总结了十条编写优秀的 JavaScript 代码的习惯，主要针对 V8 引擎：</p>\n<p>1.始终以相同的顺序实例化对象属性，以便可以共享隐藏类和随后优化的代码。V8 在对 js 代码解析的时候会有构建隐藏类的过程，以相同的顺序实例化（属性赋值）的对象会共享相同的隐藏类。下面给出一个不好的实践：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">p1.a = <span class=\"number\">5</span>;</span><br><span class=\"line\">p1.b = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">p2.b = <span class=\"number\">7</span>;</span><br><span class=\"line\">p2.a = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"comment\">// 由于 a 和 b 的赋值顺序不同，p1 和 p2 无法共享隐藏类</span></span><br></pre></td></tr></table></figure>\n<p>2.避免分配动态属性。在实例化之后向对象添加属性将强制隐藏类更改，并减慢为先前隐藏类优化的所有方法。相反，在其构造函数中分配所有对象的属性。  </p>\n<p>3.重复执行相同方法的代码将比仅执行一次（由于内联缓存）执行许多不同方法的代码运行得更快。  </p>\n<p>4.避免创建稀疏数组。稀疏数组由于不是所有的元素都存在，因此是一个哈希表，因此访问稀疏数组中的元素代价更高。另外，尽量不要采用预分配数量的大数组，更好的办法是随着你的需要把它的容量增大。最后，尽量不要删除数组中的元素，它会让数组变得稀疏。  </p>\n<p>5.标记值：V8采用32位来表示对象和数字，其中用一位来区别对象（flag = 0）或数字（flag = 1），因此这被称之为 SMI (Small Integer)因为它只有31位。因此，如果一个数字大于31位，V8需要对其进行包装，将其变成双精度并且用一个对象来封装它，因此应该尽量使用31位有符号数字从而避免昂贵的封装操作。  </p>\n<p>6.检查你的依赖，去掉不需要 import 的内容。  </p>\n<p>7.将你的代码分割成一些小的 chunks ，而不是整个引入。 </p>\n<p>8.尽可能使用 defer 来推迟加载 JavaScript，另外只加载当前路由需要的代码段。</p>\n<p>9.使用 dev tools 和 DeviceTiming 来寻找代码瓶颈。  </p>\n<p>10.使用诸如Optimize.js这样的工具来帮助解析器决定何时需要提前解析以及何时需要延后解析。  </p>\n<p>以上内容来源：</p>\n<ul>\n<li><a href=\"https://blog.sessionstack.com/how-javascript-works-parsing-abstract-syntax-trees-asts-5-tips-on-how-to-minimize-parse-time-abfcf7e8a0c8\" target=\"_blank\" rel=\"noopener\">How JavaScript works: Parsing, Abstract Syntax Trees (ASTs) + 5 tips on how to minimize parse time</a></li>\n<li><a href=\"https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e\" target=\"_blank\" rel=\"noopener\">How JavaScript works: inside the V8 engine + 5 tips on how to write optimized code</a></li>\n</ul>\n","text":"本文总结了十条编写优秀的 JavaScript 代码的习惯，主要针对 V8 引擎：1.始终以相同的顺序实例化对象属性，以便可以共享隐藏类和随后优化的代码。V8 在对 js 代码解析的时候会有构建隐藏类的过程，以相同的顺序实例化（属性赋值）的对象会共享相同的隐藏类。下面给出一个不好","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"javascript","slug":"javascript","count":2,"path":"api/tags/javascript.json"}]},{"title":"Linux服务器初始化设置用户和ssh公私钥登陆","slug":"Linux服务器初始化设置用户和ssh公私钥登陆","date":"2018-04-11T09:16:37.000Z","updated":"2018-09-18T07:26:28.553Z","comments":true,"path":"api/articles/Linux服务器初始化设置用户和ssh公私钥登陆.json","excerpt":"","keywords":null,"cover":null,"content":"<blockquote>\n<p>当我们开始使用一个新的服务器的时候，首先一定要对服务器的登陆等做一些修改工作，笔者曾经就因为对服务器登陆安全没有重视，导致服务器数据全部丢失。接下来我们按照步骤，罗列出应该做的一些事情。</p>\n</blockquote>\n<h3 id=\"修改ssh端口号\"><a href=\"#修改ssh端口号\" class=\"headerlink\" title=\"修改ssh端口号\"></a>修改ssh端口号</h3><p>第一件事情：</p>\n<p>修改ssh端口号： 之后加上一个端口比如说50000</p>\n<p><code>vi /etc/ssh/sshd_config</code>之后在port字段加上一个端口比如说50000，原来的端口号字段可能是被注释掉的，要先解除注释。</p>\n<p>然后执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n<p>这个时候可能还要重新配置一下防火墙，开放50000端口，具体如何配置也可以参考<a href=\"https://blog.csdn.net/ul646691993/article/details/52104082\" target=\"_blank\" rel=\"noopener\">这里</a>的后半部分。但是目前，阿里云的服务器实测是不需要再配置防火墙的，但是需要去登陆到网页后台修改安全组。</p>\n<p>之后就可以通过这样的方式登录了：(注意登录方式一定要写对)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@115.29.102.81 -p 50000</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>这个时候我们还是用root进行操作，所以我们接下来要给自己创建一个账户，比如创建一个如下的用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd xiaotao</span><br><span class=\"line\">passwd xiaotao</span><br></pre></td></tr></table></figure>\n<p>可以用<code>ls -al /home/`</code>查看一下账户</p>\n<p>对创建的这个用户增加sudo权限： 相关配置文件/etc/sudoers中，但是这个文件是只读的，所以要更改一下权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u+w sudoers</span><br></pre></td></tr></table></figure>\n<p>然后进入这个文件在这里进行更改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root    ALL=(ALL)       ALL</span><br><span class=\"line\">xiaotao  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>\n<p>然后再改回权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod u-w sudoers</span><br></pre></td></tr></table></figure>\n<p>注意一点，CentOS 7预设容许任何帐号透过ssh登入（也就是说自己根本不用改改，直接新建帐号登录即可），包括根和一般帐号，为了不受根帐号被黑客暴力入侵，我们必须禁止 root帐号的ssh功能，事实上root也没有必要ssh登入伺服器，因为只要使用su或sudo（当然需要输入root的密码）普通帐号便可以拥有root的权限。使用vim（或任何文本编辑器）开启的/ etc/ SSH/ sshd_config中，寻找：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">＃PermitRootLogin yes</span><br></pre></td></tr></table></figure>\n<p>修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PermitRootLogin no</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置公私钥加密登录\"><a href=\"#配置公私钥加密登录\" class=\"headerlink\" title=\"配置公私钥加密登录\"></a>配置公私钥加密登录</h3><p><strong>这一步骤要切换到自己新建的用户，不能再用 root 用户了，否则可能无法正常登陆。</strong></p>\n<p>很多时候以上所说的还是不够安全，为了更加安全方便，我们采用公私钥对称加密登录，简单的讲做法就是再客户端生成一把私钥一把公钥，私钥是在客户端的，公钥上传到服务端，对称加密进行登录。</p>\n<p>在客户端先进到这个目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.ssh</span><br></pre></td></tr></table></figure>\n<p>生成公钥和私钥（实际上如果之前有的话就不用重新生成了）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n<p>接下来把公钥上传到服务端</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp ~/.ssh/id_rsa.pub xiaotao@&lt;ssh_server_ip&gt;:~</span><br></pre></td></tr></table></figure>\n<p>在服务端执行以下命令(如果没有相关的文件和文件夹要先进行创建，注意不要使用 sudo )</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat  id_rsa.pub &gt;&gt; ～/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>配置服务器的/etc/ssh/sshd_config，下面是一些建议的配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/ssh/sshd_config</span><br><span class=\"line\"># 禁用root账户登录，非必要，但为了安全性，请配置</span><br><span class=\"line\">PermitRootLogin no</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否让 sshd 去检查用户家目录或相关档案的权限数据，</span><br><span class=\"line\"># 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。</span><br><span class=\"line\"># 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入</span><br><span class=\"line\">StrictModes no</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。</span><br><span class=\"line\"># 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内</span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile      %h/.ssh/authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\">#有了证书登录了，就禁用密码登录吧，安全要紧</span><br><span class=\"line\">PasswordAuthentication no</span><br></pre></td></tr></table></figure>\n<p>然后不要忘记 <code>sudo service sshd restart</code></p>\n<p>一般来讲，这样就算是成功了，我们可以在客户端尝试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -i ~/.ssh/id_rsa remote_username@remote_ip</span><br></pre></td></tr></table></figure>\n<p>如果不行，可能是服务端或客户端相关 <code>.ssh</code> 文件权限不对，可以进行如下尝试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务端</span><br><span class=\"line\">chown -R 0700  ~/.ssh</span><br><span class=\"line\">chown -R 0644  ~/.ssh/authorized_keys</span><br><span class=\"line\"></span><br><span class=\"line\">客户端改一下</span><br><span class=\"line\">chmod 600 id_rsa</span><br></pre></td></tr></table></figure>","text":"当我们开始使用一个新的服务器的时候，首先一定要对服务器的登陆等做一些修改工作，笔者曾经就因为对服务器登陆安全没有重视，导致服务器数据全部丢失。接下来我们按照步骤，罗列出应该做的一些事情。修改ssh端口号第一件事情：修改ssh端口号： 之后加上一个端口比如说50000vi /etc","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"},{"name":"ssh","slug":"ssh","count":1,"path":"api/tags/ssh.json"}]}]}